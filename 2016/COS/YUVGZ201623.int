ROUTINE YUVGZ201623 [Type=INT]
YUVGZ201623	;https://adventofcode.com/2016/day/23;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
Input data:
cpy a b
dec b
cpy a d
cpy 0 a
cpy b c
inc a
dec c
jnz c -2
dec d
jnz d -5
dec b
cpy b c
cpy c d
dec d
inc c
jnz d -2
tgl c
cpy -16 c
jnz 1 c
cpy 87 c
jnz 74 d
inc a
inc d
jnz d -2
inc c
jnz c -5
	*/
	/*
Year 2016, Day 23 part 1:
--- Day 23: Safe Cracking ---
This is one of the top floors of the nicest tower in EBHQ. The Easter Bunny's private office is here, complete with a safe hidden behind a painting, and who wouldn't hide a star in a safe behind a painting?

The safe has a digital screen and keypad for code entry. A sticky note attached to the safe has a password hint on it: "eggs". The painting is of a large rabbit coloring some eggs. You see 7.

When you go to type the code, though, nothing appears on the display; instead, the keypad comes apart in your hands, apparently having been smashed. Behind it is some kind of socket - one that matches a connector in your prototype computer! You pull apart the smashed keypad and extract the logic circuit, plug it into your computer, and plug your computer into the safe.

Now, you just need to figure out what output the keypad would have sent to the safe. You extract the assembunny code from the logic chip (your puzzle input).
The code looks like it uses almost the same architecture and instruction set that the monorail computer used! You should be able to use the same assembunny interpreter for this as you did there, but with one new instruction:

tgl x toggles the instruction x away (pointing at instructions like jnz does: positive means forward; negative means backward):

For one-argument instructions, inc becomes dec, and all other one-argument instructions become inc.
For two-argument instructions, jnz becomes cpy, and all other two-instructions become jnz.
The arguments of a toggled instruction are not affected.
If an attempt is made to toggle an instruction outside the program, nothing happens.
If toggling produces an invalid instruction (like cpy 1 2) and an attempt is later made to execute that instruction, skip it instead.
If tgl toggles itself (for example, if a is 0, tgl a would target itself and become inc a), the resulting instruction is not executed until the next time it is reached.
For example, given this program:

cpy 2 a
tgl a
tgl a
tgl a
cpy 1 a
dec a
dec a
cpy 2 a initializes register a to 2.
The first tgl a toggles an instruction a (2) away from it, which changes the third tgl a into inc a.
The second tgl a also modifies an instruction 2 away from it, which changes the cpy 1 a into jnz 1 a.
The fourth line, which is now inc a, increments a to 3.
Finally, the fifth line, which is now jnz 1 a, jumps a (3) instructions ahead, skipping the dec a instructions.
In this example, the final value in register a is 3.

The rest of the electronics seem to place the keypad entry (the number of eggs, 7) in register a, run the code, and then send the value left in register a to the safe.

What value should be sent to the safe?
	*/
	/*
W $$Part1^YUVGZ201623(FN)
	*/
Part1(FileName="",RecordsArr) PUBLIC	;
{
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set ANS=$$Compute(7,0,0,0,.RecordsArr)
	//
	//
	//
	quit ANS
}
Compute(a,b,c,d,&Code) [a,b,c,d]
{
	set ip=1
	while $data(Code(ip)) {
		set command=Code(ip)
		//w !,command
		set instruct=$piece(command," ",1),val1=$piece(command," ",2),val2=$piece(command," ",3)
		if instruct="tgl" {
			set val=@val1
			set tempc=$get(Code(ip+val))
			if tempc'="" {
				if $piece(tempc," ",1)="inc" {
					set $piece(Code(ip+val)," ",1)="dec"
				}
				elseif '$length($piece(tempc," ",3)) {
					set $piece(Code(ip+val)," ",1)="inc"
				}
				elseif $piece(tempc," ",1)="jnz" {
					set $piece(Code(ip+val)," ",1)="cpy"
				}
				else {
					set $piece(Code(ip+val)," ",1)="jnz"
				}
			}
			set ip=ip+1
		}
		if instruct="cpy" {
			set:val1'?.1"-"1.n val1=@val1
			set:val2'?.1"-"1.n @val2=val1 //Only valid instruction will be executed
			set ip=ip+1
		}
		if instruct="inc" {
			set @val1=@val1+1
			set ip=ip+1
		}
		if instruct="dec" {
			set @val1=@val1-1
			set ip=ip+1
		}
		if instruct="jnz" {
			set:val1'?.1"-"1.n val1=@val1
			set:val2'?.1"-"1.n val2=@val2 //val2 could be a register
			if val1 {
				set ip=ip+val2
			}
			else {
				set ip=ip+1
			}
		}
	}
	quit a
}

	/*
Year 2016, Day 23 part 2:
The safe doesn't open, but it does make several angry noises to express its frustration.

You're quite sure your logic is working correctly, so the only other thing is... you check the painting again. As it turns out, colored eggs are still eggs. Now you count 12.

As you run the program with this new input, the prototype computer begins to overheat. You wonder what's taking so long, and whether the lack of any instruction more powerful than "add one" has anything to do with it. Don't bunnies usually multiply?

Anyway, what value should actually be sent to the safe?
	*/
	/*
W $$Part2^YUVGZ201623(FN)
	*/
Part2(FileName="",RecordsArr) PUBLIC	;
{
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set ANS=$$Compute(12,0,0,0,.RecordsArr)
	//
	//
	//
	quit ANS
}
CheckData(RecordsArr)
{
	set Line="",Error=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		set pieces=$length(Record," ")
		if pieces'=2,pieces'=3 {
			set Error="Wrong data format at line "_Line
			quit
		}
		set instruction=$piece(Record," ",1),val1=$piece(Record," ",2),val2=$piece(Record," ",3)
		if ",cpy,inc,dec,jnz,tgl,"'[(","_instruction_",") {
			set Error="Unknown instruction at line "_Line
			quit
		}
		if ",cpy,jnz,"[(","_instruction_",") {
			if pieces'=3 {
				set Error="Unknown "_instruction_" format at line "_Line
				quit
			}
			if val1'?1(1(1"a",1"b",1"c",1"d"),.1"-"1.N) {
				set Error="Unknown "_instruction_" format at line "_Line
				quit
			}
			if instruction="cpy",",a,b,c,d,"'[(","_val2_",") {
				set Error="Unknown registry "_val2_" at line "_Line
			}
			if instruction="jnz",val2'?1(1(1"a",1"b",1"c",1"d"),.1"-"1.N) {
				set Error="Unknown "_instruction_" format at line "_Line
				quit
			}
		}
		if ",inc,dec,tgl,"[(","_instruction_",") {
			if pieces'=2 {
				set Error="Unknown "_instruction_" format at line "_Line
				quit
			}
			if ",a,b,c,d,"'[(","_val1_",") {
				set Error="Unknown registry "_val1_" at line "_Line
			}			
		}
	}
	if $length(Error) {
		write !,Error
		quit 0
	}
	quit 1
}
LoadFile(FileName,RecordsArr)	;
{
	kill RecordsArr
	open FileName::.1 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
