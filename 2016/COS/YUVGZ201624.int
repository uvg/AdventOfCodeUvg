ROUTINE YUVGZ201624 [Type=INT]
YUVGZ201624	;https://adventofcode.com/2016/day/24;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
Input data:
#####################################################################################################################################################################################
#.....#.#.....#.#.#...#.....#.#.#.#.....#3......#...........#.#.....#.....#.............#.#...#...#.....#...#.........#.#...............#.....#.....#.........................#.....#
#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#####.#.#.#.#####.#.###.#.#.###.#.#####.###.#.#.#.#.#####.#.#.#.#####.#.#.#####.#.#.#####.###.#.#.###.###.###.#.###.#.###.###.#.#######.#######
#.....#...#.#.....#...#.........#...........#.......#...#.#.....#.....#.#.#.......#...#.#...#...#...#.#...#...#.#...#.#.#.#.......#...#...#.....#.....#.....#...#...#.......#.#...#.#
###.#####.#.#######.###.#.#.#.#.#.#####.#.#.#.#####.#.###.#.#####.#.#.#.#.#####.#.#.#.#.#.###.#.###.#.#####.#.#.#.#.###.#.#.#.###.#.#.#.#.###.#.#.###.#.#.#.#.#.#.#.#.#.#####.#.#.#.#
#...#1......#.....#.#.#.#.....#.#.#.....#...#.#...#.......#...........#.............#...#.....#.......#.....#.....#.#.......#.#...#.#.#.#.......#...#.#...........#.#.....#...#.#...#
#.#.###.#.###.#.#.#.#.#.#.#######.#.#.###.#.#.#.###.#####.###.#.#.#.#.#.###.#.#####.#.#.#####.#####.#.#.#.#.#.#.#.###.###.#.#####.#.#.#####.#.#.#.#.#.#.#.###.#####.###.#.#.#.#.###.#
#.....#.#.....#.#...#.#.....#.#.#.#.........#.#.#.......#.#.#.......#...#...#...#.....#.#...#.......#.....#.......#...#.....#...#...#.......#...#.#.....#...#.#.....#.#...#.#...#...#
#.#.#.#.#####.#.###.#.#.#.###.#.###.#.#.#####.#.#####.#.#.#.#.#####.#.#.#.###.#######.#.###.#.###.#.#.#.#.#.#.#####.###.#####.#.#.#.#.#####.#####.#.###.#.#.#.#.#.#.#.#####.###.#.###
#...#.#...#.........#.#...#.#...#.....#.#.....#.......#.........#.....#.....#.........#.....#...#.#.#.#.....#.#.................#.#.#.......#.......#.......#...#...#.......#.#...#.#
#.#.#.#.#.#.#.###.#.###.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###.#.#.#####.#.#.#.###.#######.#.###.#.#.#.#.#.#.#.###.#.#.###.#######.#.###.#.#.#.#.###.#.#.#.#####.###.#.#.###.#
#...#.#.#.#.#...#...#...#.............#.....#.....#...#...#.#.....#...#...#.....#.#.....#...#...........#.#.#.#.......#...#.............#...#.#...#...........#...#2#...#.....#.#.#.#
###.###.#.#####.#.#.#.#.#.#.#.#.#.#.###.###.#.#.#.###.###.#.#.#.#.#.#.###.###.#.#.#.#.###.#.#.#.###.#####.###.###.#.#.#.###.#######.###.###.#.#.#.#####.#####.###.#.#.#####.#.#.#.###
#.......#...#...........#.......#...#.#.......#.....#.....#...#...#.#.........#.......#...#.#...#...........#.#...#.#...............#.#.#.....#.......#.#.#.#.....#.........#.#.#.#.#
###.#.#.#.#.#.#.#####.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#.###.#.#.#.#########.###.#.###.#.###.#.#.#.#.#######.#####.###.#.#.#.#.#####.#####.#.#.#.#.#.#######.#.###.#.#.#.#
#...#.....#.#.............#...#.#.....#.#...#.......#.........#...#...#.#...#...........#...#...........#...#...#.................#...#.#.#.....#.......#.#.#.......#...#...#...#...#
###.#.#######.#.#.#.###.#.#.#.###.#.#.#.#.#.###.#####.#.###.#.#.#.###.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#####.#.#####.#.#.#.#.#.#######.#.#.#.###.#.#.#.#.#.###.#.###.#########.###.#.#.#
#.....#...#.....#.....#...#.........#.#...#.....#...#.................#...#.#.#.......#.....#...#.#.................#.#.#.........#.....#...#.#...#.....#.................#.#.....#.#
#.#####.#.#.#####.###.#.#.#.###.###.#.#########.#.#######.###.###.#.#.#.#.#.#.#.###.#.#.#####.#.###.#.#########.#.###.###.#.###.###.#.#.#.#.#.###.#####.#.#.#######.#.###.#.#.###.###
#0#...#.#...#...........#.#.............#.#.......#.....#.#.#.....#.#.#...#.....#.#.#.......#.#...#.................#.#.#.....#...#.#.........#.......#.#...#.......#.......#.....#.#
#####.#.###.#.#.###.#####.###.#######.###.#.#.###.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#####.###.#.#####.#.#.#.###.#.#.#.#########.#.#.#.###.#.#.###.#.#####.#.#.#.#.#.###.###.#.#.#.#
#...#.#.....#.#.#...#.......#.#.#...#.........#.......#...#.#.....#.............#...........#...#.#.......#.#.....#.#...........#...#.........#.#...#.#.....#.......#...#.......#...#
###.###.###.#.###.###.#.###.###.#.#.#.#########.#####.###.#######.#.###.#.#.#.###.#.#.#.#.#.#.#.#####.###.#.#.#.#.#.#.#####.###.#.#.###.#####.#.#.#####.#.#.###.#.#####.#.#.#.#.#.#.#
#.......#...............#.....#...#...#.#...#.........#...........#.....#.....#.......#...#.....#.......#.#.#.#...#...............#.....#.....#...#.#...#...#.#.#.#.#.....#...#.#.#4#
#.#.#.#.#.#####.###.#.#####.#.###.#.###.#.#.#.###.###.#.#####.#.#####.#.#######.#.#####.#.#######.#.###.#.#.#.###.###.###.#####.#.###.#.#.#.#####.#.#.#.###.#.#.###.###.#.#.#.#.#.###
#...#...........#.......#...#.....#.#.......#.....#.........#.#.......#.#...#...#...........#.......#.....#...#...#...#.#...#.....#...#.........#...#...#.....#.....#...#...#...#...#
###.#.###.#############.#.###.###.#.###.#.#.#.#.#.#.#.#.###.#####.#.#.#.#.#.#####.###.#.#.#.#.###.#.#.#.#.#.###.#.#.###.#.#.#.###.###.#.#.###.#.#.#.#.#.#.#####.#.#.#.#.#.#.###.#.###
#...#.....#.#...#.#.#.#...........#.......#...#.....#...#...................#...#...#.#.#.#...#.......#...............#...#...#...#...#.#.#5#...#...#.#...#...#.#...#.#...#...#.#...#
#.###.###.#.#.#.#.#.#.###.#.#######.#.#.#.###.#.#.#.#.#.#.###.#.###.###.#.#.#.#.#.###.#.#.#.#.#.###.#.#.###.#.#.###.#.#.#.#.#.#.#.#.#####.#.#.#######.#.#.#.#.#.#####.#.#######.#.#.#
#.........#.#...#.#...#...#.............#.....#...#.#.#.#.#.#.....#.#...#.....#.#.#.........#.....#.........#.....#...........#...#.........#.....#...#.#.#.#...#...........#...#...#
#.#.#.#######.#.#####.#.#.#.###.#.#######.#####.#.#.###.#.#.#.###.###.#.###.#.#.#.###.#.#.#.#####.#.###.#.#.#.#.#.#.#####.#.#.###.#.#.#.#.#####.###.#####.#.#.#.#.###.#.#.#####.#####
#...#...............#.#.......#.......#.......#.........#.#.#.#...#...#...#.......#.#.....#.#...........#...#.#.#...........#.#...#.......#.........#...#...#.....#...#.#.....#.#...#
###.#.#.#.#.#########.#.#.#.#.#.#####.#.#######.#.###.#.#.#.###.###.#.#.#.#.#.###.#.#.###.#.#####.#.###########.#.#.#####.#####.#####.#####.#.#.#.#.#.#.#####.#.#.#########.#.###.#.#
#.#...#.....#.......#.....#...#.......#.#.#...#...#...#.........#...#...#.#...#.#.........#.#.......#.#.#...#...#.........#.#.........#.....#.#.#...#.......#.#.....#.......#.#.....#
#.#.###.#.###.#.#.#.#.###.#########.#.#.#.#.#.#.###.#.#.#####.#.#.#####.#####.#.#.#########.#.#.#.###.#.#####.#.#.###.###.#.#.#.#.#.#####.###.#.###########.#.#.#.#.#.#######.#####.#
#........7#.....#.#...#.#.#.#.........#...#.#...........#.....#.......#.........#.........#.....#.......#.#.......#.#.#...#...#.#.#....6#.#.........................#...#.#.......#.#
#.###.#.###.###.###.#.#.###.###.#####.###.#.#.###.#####.###.#.###.#.#.#.#.#.#.#.#.#####.#.#.#####.#######.#.###.#.#.#####.#####.#.#.#.###.#.#.#.#.#####.#.#.###.#####.#.#.#.#.#.#.#.#
#.#...#.#...#.#.....#.#.......#...#.....#...#...#...#...#.#.....#...#.#...#...#...#.#.............#.............#.#...#.............#.#.....#.....#.......#.#.#.#.........#...#...#.#
#####################################################################################################################################################################################
	*/
	/*
Year 2016, Day 24 part 1:
--- Day 24: Air Duct Spelunking ---
You've finally met your match; the doors that provide access to the roof are locked tight, and all of the controls and related electronics are inaccessible. You simply can't reach them.

The robot that cleans the air ducts, however, can.

It's not a very fast little robot, but you reconfigure it to be able to interface with some of the exposed wires that have been routed through the HVAC system. If you can direct it to each of those locations, you should be able to bypass the security controls.

You extract the duct layout for this area from some blueprints you acquired and create a map with the relevant locations marked (your puzzle input). 0 is your current location, from which the cleaning robot embarks; the other numbers are (in no particular order) the locations the robot needs to visit at least once each. Walls are marked as #, and open passages are marked as .. Numbers behave like open passages.

For example, suppose you have a map like the following:

###########
#0.1.....2#
#.#######.#
#4.......3#
###########
To reach all of the points of interest as quickly as possible, you would have the robot take the following path:

0 to 4 (2 steps)
4 to 1 (4 steps; it can't move diagonally)
1 to 2 (6 steps)
2 to 3 (2 steps)
Since the robot isn't very fast, you need to find it the shortest route. This path is the fewest steps (in the above example, a total of 14) required to start at 0 and then visit every other location at least once.

Given your actual map, and starting from location 0, what is the fewest number of steps required to visit every non-0 number marked on the map at least once?
	*/
	/*
W $$Part1^YUVGZ201624(FN)
	*/
Part1(FileName="",RecordsArr) [minsteps] PUBLIC	;
{
	new minsteps
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	do GetPositions(.RecordsArr,.Positions)
	zw RecordsArr,Positions
	set start=Positions(0)
	kill Positions(0)
	set $extract(RecordsArr($list(start,1)),$list(start,2))="."
	zw RecordsArr,Positions
	set str="" for i=1:1:$order(Positions(""),-1) set str=str_i
	set from=str,last=$reverse(str)
	write !,from,!,last,!
	for i=from:1:last if i'[0,'$translate(str,i) set arr(i)=$increment(total)
	set ANS=$$GetMinSteps(.arr,.RecordsArr,.Positions,$list(start,1),$list(start,2))
	//
	//
	//
	quit ANS
}
GetMinSteps(&Combo,&RecordsArr,&Positions,fromY,fromX) [Visited,MinFoundSteps]
{
	new Visited,MinFoundSteps
	set path="",minSteps=99999999
	for  {
		set path=$order(Combo(path)) quit:path=""
		merge tempRecordsArr=RecordsArr,tempPositions=Positions
		set total=0,y=fromY,x=fromX
		for i=1:1:$length(path) {
			set ltr=$extract(path,i)
			set pos=$get(tempPositions(ltr))
			continue:'$length(pos)
			kill Visited
			set minPath="",MinFoundSteps=9999999999999999
			set total=total+$$GetSteps(y,x,$list(pos,1),$list(pos,2),.tempRecordsArr,.tempPositions,0)
			set y=$list(pos,1),x=$list(pos,2)
			//w !,y,";",x,"=",total
		}
		set:total<minSteps minSteps=total
		w !,path,"=",total,";",minSteps
		set Combo(path)=total
	}
	quit minSteps
}
GetSteps(fromY,fromX,toY,toX,&Grid,&Positions,Steps) [Visited,MinFoundSteps]
{
	set Queue($increment(Queue))=$listbuild(fromY,fromX,Steps)
	merge Queue(Queue,"Positions")=Positions
	merge tempPositions=Positions
	for  {
		set Key=$order(Queue("")) quit:Key=""
		set data=Queue(Key)
		set fromY=$list(data,1),fromX=$list(data,2),Steps=$list(data,3)
		kill Positions merge Positions=Queue(Key,"Positions")
		kill Queue(Key)
		continue:Steps>MinFoundSteps
		set ltr=$extract($get(Grid(fromY)),fromX)
		if (ltr="#")||'$length(ltr) continue
		if ltr'="." kill Positions(ltr)
		if $data(Visited(fromY,fromX)),Visited(fromY,fromX)<=Steps continue
		set Visited(fromY,fromX)=Steps
		if fromY=toY,fromX=toX {
			set $extract(Grid(fromY),fromX)="."
			if Steps<MinFoundSteps {
				set MinFoundSteps=Steps
				kill tempPositions merge tempPositions=Positions
			}
			//w !,fromY,";",fromX,"=",Steps,";",MinFoundSteps
			continue
		}
		set Queue($increment(Queue))=$listbuild(fromY-1,fromX,Steps+1)
		merge Queue(Queue,"Positions")=Positions
		set Queue($increment(Queue))=$listbuild(fromY+1,fromX,Steps+1)
		merge Queue(Queue,"Positions")=Positions
		set Queue($increment(Queue))=$listbuild(fromY,fromX-1,Steps+1)
		merge Queue(Queue,"Positions")=Positions
		set Queue($increment(Queue))=$listbuild(fromY,fromX+1,Steps+1)
		merge Queue(Queue,"Positions")=Positions
	}
	kill Positions merge Positions=tempPositions
	quit MinFoundSteps
}
GetPositions(&RecordsArr,&Positions)
{
	//Positions(Digit)=$lb(y,x)
	set Line=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		for i=0:1:9 {
			set x=$find(Record,i)-1
			set:x>0 Positions(i)=$listbuild(Line,x)
		}
	}
}
	/*
Year 2016, Day 24 part 2:
Of course, if you leave the cleaning robot somewhere weird, someone is bound to notice.

What is the fewest number of steps required to start at 0, visit every non-0 number marked on the map at least once, and then return to 0?
	*/
	/*
W $$Part2^YUVGZ201624(FN)
	*/
Part2(FileName="",RecordsArr) [MinFoundSteps,Visited] PUBLIC	;
{
	new MinFoundSteps,Visited
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	do GetPositions(.RecordsArr,.Positions)
	zw RecordsArr,Positions
	set start=Positions(0)
	kill Positions(0)
	set $extract(RecordsArr($list(start,1)),$list(start,2))="."
	zw RecordsArr,Positions
	set str="" for i=1:1:$order(Positions(""),-1) set str=str_i
	set from=str,last=$reverse(str)
	write !,from,!,last,!
	for i=from:1:last if i'[0,'$translate(str,i) set arr(i)=$increment(total)
	merge OrgPositions=Positions
	set ANS=$$GetMinSteps(.arr,.RecordsArr,.Positions,$list(start,1),$list(start,2))
	write !!
	zwrite arr,start
	for i=1:1:$order(Positions(""),-1) {
		set pos=Positions(i)
		kill tempPositions,tempRecordsArr,Visited merge tempPositions=Positions,tempRecordsArr=RecordsArr
		set MinFoundSteps=99999999999
		zwrite pos,tempRecordsArr
		set extra(i)=$$GetSteps($list(pos,1),$list(pos,2),$list(start,1),$list(start,2),.tempRecordsArr,.tempPositions,0)
	}
	zwrite extra
	set a="",min=99999999999
	for  {
		set a=$order(arr(a)) quit:a=""
		set ltr=$extract(a,*)
		set arr(a)=arr(a)+extra(ltr)
		if arr(a)<min set min=arr(a)
	}
	write !!,min,!
	zwrite arr
	set ANS=min
	//
	//
	//
	quit ANS
}
CheckData(RecordsArr)
{
	set Line="",Error="",Width=$length(RecordsArr(1))
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		if $length(Record)'=Width {
			set Error="Wrong data size at line "_Line
			quit
		}
		if $length($translate(Record,".#0123456789")) {
			set Error="Wrong data format at line "_Line
			quit
		}
		for i=0:1:9 {
			if Record[i {
				if $data(found(i)) {
					set Error="Value "_i_" was found at line "_Line_" and line "_found(i)
					quit
				}
				set found(i)=Line
			}
		}
		quit:$length(Error)
	}
	if $length(Error) {
		write !,Error
		quit 0
	}
	quit 1
}
LoadFile(FileName,RecordsArr)	;
{
	kill RecordsArr
	open FileName::.1 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
