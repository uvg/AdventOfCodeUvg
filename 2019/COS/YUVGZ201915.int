ROUTINE YUVGZ201915 [Type=INT]
YUVGZ201915	;https://adventofcode.com/2019/day/15;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
3,1033,1008,1033,1,1032,1005,1032,31,1008,1033,2,1032,1005,1032,58,1008,1033,3,1032,1005,1032,81,1008,1033,4,1032,1005,1032,104,99,101,0,1034,1039,1001,1036,0,1041,1001,1035,-1,1040,1008,1038,0,1043,102,-1,1043,1032,1,1037,1032,1042,1106,0,124,101,0,1034,1039,101,0,1036,1041,1001,1035,1,1040,1008,1038,0,1043,1,1037,1038,1042,1105,1,124,1001,1034,-1,1039,1008,1036,0,1041,1002,1035,1,1040,1001,1038,0,1043,1002,1037,1,1042,1106,0,124,1001,1034,1,1039,1008,1036,0,1041,102,1,1035,1040,1001,1038,0,1043,102,1,1037,1042,1006,1039,217,1006,1040,217,1008,1039,40,1032,1005,1032,217,1008,1040,40,1032,1005,1032,217,1008,1039,39,1032,1006,1032,165,1008,1040,39,1032,1006,1032,165,1101,2,0,1044,1106,0,224,2,1041,1043,1032,1006,1032,179,1102,1,1,1044,1106,0,224,1,1041,1043,1032,1006,1032,217,1,1042,1043,1032,1001,1032,-1,1032,1002,1032,39,1032,1,1032,1039,1032,101,-1,1032,1032,101,252,1032,211,1007,0,59,1044,1106,0,224,1101,0,0,1044,1106,0,224,1006,1044,247,101,0,1039,1034,1001,1040,0,1035,1002,1041,1,1036,102,1,1043,1038,101,0,1042,1037,4,1044,1105,1,0,33,20,19,43,28,91,62,55,96,28,52,9,24,99,11,45,80,58,96,2,8,76,1,37,5,95,18,6,97,67,47,4,19,29,74,57,45,65,17,43,93,33,71,93,26,2,86,11,31,74,85,36,94,20,89,68,45,99,43,21,3,92,69,95,8,30,84,45,10,64,95,49,60,60,45,30,94,36,17,97,90,39,4,97,76,28,80,92,5,66,20,69,95,43,95,35,30,67,67,87,36,44,11,83,62,73,42,80,20,99,79,46,1,75,85,24,5,84,47,78,91,91,38,74,16,31,96,37,60,69,12,96,2,5,83,24,67,42,7,67,94,77,34,6,75,2,61,37,15,11,65,13,63,39,42,93,22,12,89,58,98,28,69,13,98,68,34,13,93,56,85,28,92,45,84,79,70,12,27,85,1,86,94,57,64,30,75,78,49,91,19,94,77,34,40,15,64,26,34,31,70,65,34,65,7,73,61,8,23,82,55,78,36,93,10,29,64,42,99,34,91,17,33,98,45,44,74,98,60,76,6,44,73,11,13,11,73,92,55,90,3,54,23,75,28,36,82,89,84,6,39,31,39,98,34,61,21,93,48,71,80,7,46,76,71,17,7,91,6,22,76,70,27,98,35,29,69,93,42,81,62,46,87,47,51,66,2,60,3,76,68,68,74,70,3,89,18,2,57,74,79,97,16,5,73,19,90,49,6,41,88,83,34,63,52,84,14,19,76,78,88,19,92,90,34,16,69,45,85,30,71,16,77,30,43,65,85,66,11,2,72,3,83,84,14,86,90,74,79,35,33,29,78,9,92,35,64,32,30,66,9,65,30,85,81,44,95,41,22,16,28,75,63,72,23,5,73,24,89,80,25,40,88,62,3,68,6,80,6,39,17,76,24,78,6,90,79,38,44,78,85,29,48,25,75,27,76,92,19,93,21,61,56,13,64,92,52,77,12,33,77,41,75,86,29,34,65,38,66,17,15,95,50,87,52,64,72,73,6,26,80,71,8,86,1,23,67,10,72,89,9,95,60,20,46,64,99,34,46,65,14,54,93,84,4,13,86,12,26,68,56,33,83,12,93,42,74,9,99,62,22,20,83,75,13,71,96,53,96,41,8,15,76,97,55,8,78,85,57,79,30,87,17,46,62,85,14,70,63,82,28,46,96,35,89,6,9,27,44,86,93,28,9,97,73,14,7,84,64,15,62,14,17,88,92,82,11,47,63,73,13,94,98,88,15,37,38,11,2,74,20,73,94,26,96,64,56,80,53,48,85,85,35,15,90,63,9,42,99,81,97,26,94,32,24,96,61,38,18,57,22,76,7,5,43,55,97,74,35,99,86,24,25,8,60,75,18,61,14,97,52,64,97,45,29,69,91,43,40,99,58,72,73,70,45,5,97,37,89,77,32,92,94,6,33,72,64,35,75,14,32,99,64,54,78,1,92,35,30,71,11,48,82,61,49,12,46,75,54,52,33,92,24,11,72,72,16,17,57,72,68,46,15,85,58,74,55,54,87,97,44,94,16,84,57,56,96,33,79,7,70,50,23,98,91,6,62,51,73,68,17,83,93,56,15,81,99,88,15,13,93,53,48,69,2,14,83,86,39,4,54,69,52,42,60,79,92,38,68,90,48,77,46,77,16,89,3,96,77,11,77,23,73,98,35,3,1,97,48,62,36,74,13,93,19,71,23,70,64,64,14,71,86,98,20,95,1,97,30,92,16,98,63,94,56,90,49,94,28,88,43,84,38,74,83,62,4,98,63,69,0,0,21,21,1,10,1,0,0,0,0,0,0
	*/
	/*
Out here in deep space, many things can go wrong. Fortunately, many of those things have indicator lights. Unfortunately, one of those lights is lit: the oxygen system for part of the ship has failed!

According to the readouts, the oxygen system must have failed days ago after a rupture in oxygen tank two; that section of the ship was automatically sealed once oxygen levels went dangerously low. A single remotely-operated repair droid is your only option for fixing the oxygen system.

The Elves' care package included an Intcode program (your puzzle input) that you can use to remotely control the repair droid. By running that program, you can direct the repair droid to the oxygen system and fix the problem.

The remote control program executes the following steps in a loop forever:

Accept a movement command via an input instruction.
Send the movement command to the repair droid.
Wait for the repair droid to finish the movement operation.
Report on the status of the repair droid via an output instruction.
Only four movement commands are understood: north (1), south (2), west (3), and east (4). Any other command is invalid. The movements differ in direction, but not in distance: in a long enough east-west hallway, a series of commands like 4,4,4,4,3,3,3,3 would leave the repair droid back where it started.

The repair droid can reply with any of the following status codes:

0: The repair droid hit a wall. Its position has not changed.
1: The repair droid has moved one step in the requested direction.
2: The repair droid has moved one step in the requested direction; its new position is the location of the oxygen system.
You don't know anything about the area around the repair droid, but you can figure it out by watching the status codes.

For example, we can draw the area using D for the droid, # for walls, . for locations the droid can traverse, and empty space for unexplored locations. Then, the initial state looks like this:

      
      
   D  
      
      
To make the droid go north, send it 1. If it replies with 0, you know that location is a wall and that the droid didn't move:

      
   #  
   D  
      
      
To move east, send 4; a reply of 1 means the movement was successful:

      
   #  
   .D 
      
      
Then, perhaps attempts to move north (1), south (2), and east (4) are all met with replies of 0:

      
   ## 
   .D#
    # 
      
Now, you know the repair droid is in a dead end. Backtrack with 3 (which you already know will get a reply of 1 because you already know that location is open):

      
   ## 
   D.#
    # 
      
Then, perhaps west (3) gets a reply of 0, south (2) gets a reply of 1, south again (2) gets a reply of 0, and then west (3) gets a reply of 2:

      
   ## 
  #..#
  D.# 
   #  
Now, because of the reply of 2, you know you've found the oxygen system! In this example, it was only 2 moves away from the repair droid's starting position.

What is the fewest number of movement commands required to move the repair droid from its starting position to the location of the oxygen system?
	*/
Part1(FileName="",Data="") PUBLIC
{
	if '$length(Data) {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
		if ($order(RecordsArr(""))'=1)||($order(RecordsArr(""),-1)'=1) {
			write !,"Wrong data was red from "_FileName
			quit 0
		}
		set Data=RecordsArr(1)
	}
	quit:'$$CheckData(Data)
	for i=1:1:65 write !
	//if $get(^mtempSORT($zname,"Part1","LocationX")),$get(^mtempSORT($zname,"Part1","LocationY")) {
	//	set LocationX=^mtempSORT($zname,"Part1","LocationX")
	//		set LocationY=^mtempSORT($zname,"Part1","LocationY")
	//}
	//else {
	//		kill ^mtempSORT($zname)
	//}
	//kill ^mtempSORT($zname)
	set LocationY="" for  {
		set LocationY=$order(^mtempSORT($zname,"Part1","grid",LocationY)) quit:LocationY=""
		set LocationX="" for  {
			set LocationX=$order(^mtempSORT($zname,"Part1","grid",LocationY,LocationX)) quit:LocationX=""
			set Val=^mtempSORT($zname,"Part1","grid",LocationY,LocationX)
			if Val="D" set ^mtempSORT($zname,"Part1","grid",LocationY,LocationX)="."
		}
	}
	set LocationX=60,LocationY=30
	set ^mtempSORT($zname,"Part1","LocationX")=LocationX,^mtempSORT($zname,"Part1","LocationY")=LocationY
	set ^mtempSORT($zname,"Part1","grid",LocationY,LocationX)="D"
	//write *27,*41,*76,*27,*91,30,*59,60,*102,*27,*41,*74,"D"
	for  {
		do ComputeSignalCode(.Data,.Inputs,.ERR,,0,,,"Output","Input")
		quit:$length(ERR)
		quit
	}
	quit:$length(ERR) 0
	write !!
	//zwrite ^mtempSORT($zname,"Part1","grid")
	//write !!
	//w !!!!,"new data is ",Data
	quit 1
}
Input(Line)
{
	do DisplayGrid("Part1")
	set LocationX=^mtempSORT($zname,"Part1","LocationX")
	set LocationY=^mtempSORT($zname,"Part1","LocationY")
	
	for  {
		write *27,*41,*76,*27,*91,60,*59,1,*102,*27,*41,*74,"Which direction to move? (1"_$char(30)_"2"_$char(31)_"3"_$char(17)_"4"_$char(16)_")",$justify("",50)
		read Direction
		quit:",1,2,3,4,"[(","_Direction_",")
	}
	quit $$SetDirection(Direction)
	set Direction=$get(^mtempSORT($zname,"Part1","Direction"))
	if Direction="" set ^mtempSORT($zname,"Part1","Direction")=1 quit 1
	//zw ^mtempSORT($zname,"Part1","grid")
	if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX+1))="" quit $$SetDirection(4)
	if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX-1))="" quit $$SetDirection(3)
	if $get(^mtempSORT($zname,"Part1","grid",LocationY+1,LocationX))="" quit $$SetDirection(2)
	if $get(^mtempSORT($zname,"Part1","grid",LocationY-1,LocationX))="" quit $$SetDirection(1)
	if Direction=1 {
		if $get(^mtempSORT($zname,"Part1","grid",LocationY-1,LocationX))="" quit $$SetDirection(1)
	}
	if Direction=2 {
		if $get(^mtempSORT($zname,"Part1","grid",LocationY+1,LocationX))="" quit $$SetDirection(2)
	}
	if Direction=3 {
		if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX-1))="" quit $$SetDirection(3)
	}
	if Direction=4 {
		if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX+1))="" quit $$SetDirection(4)
	}
	kill random
	if $get(^mtempSORT($zname,"Part1","grid",LocationY-1,LocationX))="" set random(1)=""
	if $get(^mtempSORT($zname,"Part1","grid",LocationY+1,LocationX))="" set random(2)=""
	if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX-1))="" set random(3)=""
	if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX+1))="" set random(4)=""
	if '$data(random) {
		if $get(^mtempSORT($zname,"Part1","grid",LocationY-1,LocationX))="." set random(1)=""
		if $get(^mtempSORT($zname,"Part1","grid",LocationY+1,LocationX))="." set random(2)=""
		if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX-1))="." set random(3)=""
		if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX+1))="." set random(4)=""
	}
	if $order(random(""))=$order(random(""),-1) {
		set Direction=$order(random(""))
	}
	else {
		for  {
			set Direction=$random(4)+1
			quit:$data(random(Direction))
			//read Direction
			//quit:",1,2,3,4,"[(","_Direction_",")
			//set Direction=$random(4)+1
		}
	}
	set ^mtempSORT($zname,"Part1","Direction")=Direction
	quit Direction
}
SetDirection(Direction)
{
	set ^mtempSORT($zname,"Part1","Direction")=Direction
	quit Direction
}	
DisplayGrid(PartKey)
{
	//write *27,*41,*76,*27,*91,1,*59,1,*102,*27,*41,*74,"Grid:",!
	//zw ^mtempSORT($zname,PartKey,"grid")
	if $get(^mtempSORT($zname,PartKey,"Oxygen")) {
		set LocationX=$piece(^mtempSORT($zname,PartKey,"Oxygen"),",",1),LocationY=$piece(^mtempSORT($zname,PartKey,"Oxygen"),",",2)
		write *27,*41,*76,*27,*91,LocationY,*59,LocationX,*102,*27,*41,*74,"O"
		set ^mtempSORT($zname,PartKey,"grid",LocationY,LocationX)="O"
	}
	write *27,*41,*76,*27,*91,60,*59,1,*102,*27,*41,*74,$justify("",120)
	set LocationY="" for  {
		set LocationY=$order(^mtempSORT($zname,PartKey,"grid",LocationY)) quit:LocationY=""
		set LocationX="" for  {
			set LocationX=$order(^mtempSORT($zname,PartKey,"grid",LocationY,LocationX)) quit:LocationX=""
			set Val=^mtempSORT($zname,PartKey,"grid",LocationY,LocationX)
			write *27,*41,*76,*27,*91,LocationY,*59,LocationX,*102,*27,*41,*74,Val
		}
	}
}
Output(Line,Val)
	set LocationX=^mtempSORT($zname,"Part1","LocationX")
	set LocationY=^mtempSORT($zname,"Part1","LocationY")
	set ^mtempSORT($zname,"Part1","grid",LocationY,LocationX)=$select(Val=0:"D",1:".")
	set Direction=^mtempSORT($zname,"Part1","Direction")
	set LocationX=LocationX+$case(Direction,3:-1,4:1,:0)
	set LocationY=LocationY+$case(Direction,1:-1,2:1,:0)
	if Val=0 {
		set ^mtempSORT($zname,"Part1","grid",LocationY,LocationX)="#"
	}
	if Val=1 {
		set ^mtempSORT($zname,"Part1","grid",LocationY,LocationX)="D"
		set ^mtempSORT($zname,"Part1","LocationX")=LocationX
		set ^mtempSORT($zname,"Part1","LocationY")=LocationY
	}
	if Val=2 {
		set ^mtempSORT($zname,"Part1","grid",LocationY,LocationX)="O"
		set ^mtempSORT($zname,"Part1","LocationX")=LocationX
		set ^mtempSORT($zname,"Part1","LocationY")=LocationY
		do DisplayGrid("Part1")
		set ^mtempSORT($zname,"Part1","Oxygen")=LocationX_","_LocationY
		w !,"Found the oxygen in location ",LocationX,",",LocationY
		//K A S A=A
	}
	quit
    ;              1     2     3        4                   5          6      7        8               9
ComputeSignalCode(Data,Inputs,ERR,InstructionPointer=1,ExitOpCode4=0,ExitSW,Output,OutputLabel="",InputLabel="")
{
	set OpCode="",ERR="",DiagnosticCode="",InputId=0,ExitSW=0,Offset=0,Line=0
	//w !,"Data before: ",Data
	while OpCode'=99&&'$length(ERR)&&'ExitSW {
		if Data[",," for i=1:1:$length(Data,",") if $piece(Data,",",i)="" set $piece(Data,",",i)=0
		set Instruction=$piece(Data,",",InstructionPointer)
		;W !,Instruction,"@",InstructionPointer
		if Instruction'?1.5n {
			set ERR="Wrong instruction "_Instruction
			quit 
		}
		set OpCode=+$extract(Instruction,*-1,*)
		if ",1,2,3,4,5,6,7,8,9,99,"'[(","_OpCode_",") {
			set ERR="Unknown operation "_OpCode
			quit
		}
		set ParametersMode=$extract(Instruction,1,*-2)
		//w !,"Instruction=",Instruction,";","Offset=",Offset
		if OpCode=99
		{
			if $length(ParametersMode) set ERR="Exit operation with parmaters "_ParametersMode
			set ExitSW=1
			//write !,"Finish computing, exiting code",!!
			quit
		}
		if OpCode=1
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1) ;W !,"<",Val1
			set Val2=$piece(Data,",",InstructionPointer+2) ;W !,"<",Val2
			set OutPos=$piece(Data,",",InstructionPointer+3) ;W !,"<",OutPos
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1) ;W !,"@",Val1
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1) ;W !,"@",Val2
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1) ;W !,"@",Val1
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1) ;W !,"@",Val2
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1) ;W !,"@",OutPos
			set Val=Val1+Val2
			;w !,Val_">"_OutPos
			//w !,"Operation 1>>Add "_Val1_"+"_Val2_" and store it in "_OutPos
			//w !,"Data before "_Data
			set $piece(Data,",",OutPos+1)=Val
			//w !,"Data after "_Data
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=2
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set $piece(Data,",",OutPos+1)=Val1*Val2
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=3
		{
			if $extract(ParametersMode,1,*-1)||(ParametersMode=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set OutPos=$piece(Data,",",InstructionPointer+1)
			if $extract(ParametersMode,*)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set InputId=InputId+1
			if $data(Inputs(InputId)) {
				set Val=Inputs(InputId)
			}
			elseif $length(InputLabel) {
				//set Val=$$@(InputLabel)(Line)
				set Val=$$Input(Line)
			}
			else {
				read !,"Please enter value: ",Val
				write !
			}
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+2
			continue
		}
		if OpCode=4
		{
			if $extract(ParametersMode,1,*-1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			set:'$length(Val) Val=0
			set Line=Line+1
			if '$data(Output) {
				if $length(OutputLabel) do @(OutputLabel_"("_Line_","_Val_")")
				write:'$length(OutputLabel) !,Val
			}
			else {
				set Output(Line)=Val
			}
			set DiagnosticCode=Val
			set InstructionPointer=InstructionPointer+2
			quit:ExitOpCode4
			continue
		}
		if OpCode=5
		{
			if $extract(ParametersMode,1,*-2) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			if Val {
				set InstructionPointer=$piece(Data,",",InstructionPointer+2)
				if '$extract(ParametersMode,*-1) set InstructionPointer=$piece(Data,",",InstructionPointer+1)
				if $extract(ParametersMode,*-1)=2 set InstructionPointer=$piece(Data,",",InstructionPointer+Offset+1)
				set InstructionPointer=InstructionPointer+1
				continue
			}
			set InstructionPointer=InstructionPointer+3
			continue
		}
		if OpCode=6
		{
			if $extract(ParametersMode,1,*-2) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			if 'Val {
				set InstructionPointer=$piece(Data,",",InstructionPointer+2)
				if '$extract(ParametersMode,*-1) set InstructionPointer=$piece(Data,",",InstructionPointer+1)
				if $extract(ParametersMode,*-1)=2 set InstructionPointer=$piece(Data,",",InstructionPointer+Offset+1)
				set InstructionPointer=InstructionPointer+1
				continue
			}
			set InstructionPointer=InstructionPointer+3
			continue
		}
		if OpCode=7
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set Val=Val1<Val2
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=8
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set:'$length(Val1) Val1=0
			set:'$length(Val2) Val2=0
			set Val=Val1=Val2
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=9
		{
			if $extract(ParametersMode,1,*-1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			set Offset=Offset+Val
			set InstructionPointer=InstructionPointer+2
			continue
		}

		set ERR="Unknown operation for instruction "_Instruction
		quit
	}
	if $length(ERR) {
		write !,ERR
		quit 0
	}
	//w !,"Data after: ",Data
	//write !,"Diagnostic Code is: "_DiagnosticCode
	quit DiagnosticCode
}

	/*
You quickly repair the oxygen system; oxygen gradually fills the area.

Oxygen starts in the location containing the repaired oxygen system. It takes one minute for oxygen to spread to all open locations that are adjacent to a location that already contains oxygen. Diagonal locations are not adjacent.

In the example above, suppose you've used the droid to explore the area fully and have the following map (where locations that currently contain oxygen are marked O):

 ##   
#..## 
#.#..#
#.O.# 
 ###  
Initially, the only location which contains oxygen is the location of the repaired oxygen system. However, after one minute, the oxygen spreads to all open (.) locations that are adjacent to a location containing oxygen:

 ##   
#..## 
#.#..#
#OOO# 
 ###  
After a total of two minutes, the map looks like this:

 ##   
#..## 
#O#O.#
#OOO# 
 ###  
After a total of three minutes:

 ##   
#O.## 
#O#OO#
#OOO# 
 ###  
And finally, the whole region is full of oxygen after a total of four minutes:

 ##   
#OO## 
#O#OO#
#OOO# 
 ###  
So, in this example, all locations contain oxygen after 4 minutes.

Use the repair droid to get a complete map of the area. How many minutes will it take to fill with oxygen?
	*/
Part2(FileName="",Data="") PUBLIC
{
	if '$length(Data) {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
		if ($order(RecordsArr(""))'=1)||($order(RecordsArr(""),-1)'=1) {
			write !,"Wrong data was red from "_FileName
			quit 0
		}
		set Data=RecordsArr(1)
	}
	quit:'$$CheckData(Data)
	for i=1:1:65 write !
	kill ^mtempSORT($zname,"Part2") merge ^mtempSORT($zname,"Part2")=^mtempSORT($zname,"Part1")
	set LocationY="" for  {
		set LocationY=$order(^mtempSORT($zname,"Part2","grid",LocationY)) quit:LocationY=""
		set LocationX="" for  {
			set LocationX=$order(^mtempSORT($zname,"Part2","grid",LocationY,LocationX)) quit:LocationX=""
			set Val=^mtempSORT($zname,"Part2","grid",LocationY,LocationX)
			if Val="D" set ^mtempSORT($zname,"Part2","grid",LocationY,LocationX)="."
		}
	}
	set Location=^mtempSORT($zname,"Part2","Oxygen")
	set LocationX=$piece(Location,",",1),LocationY=$piece(Location,",",2)
	set ^mtempSORT($zname,"Part2","LocationX")=LocationX,^mtempSORT($zname,"Part2","LocationY")=LocationY
	set ^mtempSORT($zname,"Part2","grid",LocationY,LocationX)="O"
	set Total=0
	for  {
		do DisplayGrid("Part2")
		quit:'$$ComputeNext()
		set Total=Total+1
		//h 1
	}
	/*
	//write *27,*41,*76,*27,*91,30,*59,60,*102,*27,*41,*74,"D"
	for  {
		do ComputeSignalCode(.Data,.Inputs,.ERR,,0,,,"Output","Input")
		quit:$length(ERR)
		quit
	}
	quit:$length(ERR) 0
	write !!
	//zwrite ^mtempSORT($zname,"grid")
	//write !!
	//w !!!!,"new data is ",Data
	*/
	quit Total
}
ComputeNext()
{
	kill ^mtempSORT($zname,"Part2","Newgrid")
	merge ^mtempSORT($zname,"Part2","Newgrid")=^mtempSORT($zname,"Part2","grid")
	set SW=0
	set LocationY="" for  {
		set LocationY=$order(^mtempSORT($zname,"Part2","grid",LocationY)) quit:LocationY=""
		set LocationX="" for  {
			set LocationX=$order(^mtempSORT($zname,"Part2","grid",LocationY,LocationX)) quit:LocationX=""
			set Val=^mtempSORT($zname,"Part2","grid",LocationY,LocationX)
			continue:Val'="O"
			set ANS=$$SetAlign(LocationY,LocationX)
			set:ANS SW=1
		}
	}
	kill ^mtempSORT($zname,"Part2","grid")
	merge ^mtempSORT($zname,"Part2","grid")=^mtempSORT($zname,"Part2","Newgrid")
	quit SW
}
SetAlign(LocationY,LocationX)
{
	set SW=0
	if $get(^mtempSORT($zname,"Part2","grid",LocationY+1,LocationX))="." {
		set SW=1,^mtempSORT($zname,"Part2","Newgrid",LocationY+1,LocationX)="O"
	}
	if $get(^mtempSORT($zname,"Part2","grid",LocationY-1,LocationX))="." {
		set SW=1,^mtempSORT($zname,"Part2","Newgrid",LocationY-1,LocationX)="O"
	}
	if $get(^mtempSORT($zname,"Part2","grid",LocationY,LocationX+1))="." {
		set SW=1,^mtempSORT($zname,"Part2","Newgrid",LocationY,LocationX+1)="O"
	}
	if $get(^mtempSORT($zname,"Part2","grid",LocationY,LocationX-1))="." {
		set SW=1,^mtempSORT($zname,"Part2","Newgrid",LocationY,LocationX-1)="O"
	}
	quit SW
}
	
CheckData(Data)
{
	if $length(Data,",")<2,Data'=99 {
		write !,"Wrong data "_Data
		quit 0
	}
	set ERR=""
	for Location=1:1:$length(Data,",") {
		set Val=$piece(Data,",",Location)
		if Val'?.1"-"1.n {
			set ERR="Wrong value "_val
			write !,ERR
			quit
		}
	}
	quit:$length(ERR) 0
	quit 1
}
LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::2 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		if $length(Record) set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
