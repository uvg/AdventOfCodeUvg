ROUTINE YUVGZ201917 [Type=INT]
YUVGZ201917	;https://adventofcode.com/2019/day/17;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
1,330,331,332,109,2538,1102,1182,1,15,1102,1407,1,24,1001,0,0,570,1006,570,36,1002,571,1,0,1001,570,-1,570,1001,24,1,24,1106,0,18,1008,571,0,571,1001,15,1,15,1008,15,1407,570,1006,570,14,21101,58,0,0,1106,0,786,1006,332,62,99,21101,0,333,1,21102,73,1,0,1106,0,579,1101,0,0,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,102,1,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21102,1,340,1,1106,0,177,21102,477,1,1,1106,0,177,21102,1,514,1,21101,176,0,0,1105,1,579,99,21102,184,1,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,101,0,572,1182,21101,375,0,1,21102,211,1,0,1106,0,579,21101,1182,11,1,21102,222,1,0,1106,0,979,21101,0,388,1,21101,233,0,0,1105,1,579,21101,1182,22,1,21101,0,244,0,1106,0,979,21101,0,401,1,21102,1,255,0,1106,0,579,21101,1182,33,1,21101,0,266,0,1106,0,979,21101,414,0,1,21101,277,0,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21102,1182,1,1,21101,313,0,0,1106,0,622,1005,575,327,1101,0,1,575,21102,1,327,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,2,12,0,109,4,1202,-3,1,586,21001,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2106,0,0,109,5,1201,-4,0,629,21002,0,1,-2,22101,1,-4,-4,21102,1,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20102,1,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,0,702,0,1105,1,786,21201,-1,-1,-1,1106,0,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1105,1,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,756,0,0,1106,0,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1106,0,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,20101,0,576,-6,20101,0,577,-5,1105,1,814,21102,1,0,-1,21102,1,0,-5,21102,1,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,29,-3,22201,-6,-3,-3,22101,1407,-3,-3,2102,1,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1106,0,924,1205,-2,873,21101,0,35,-4,1105,1,924,1202,-3,1,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1102,2,1,0,1201,-3,0,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,29,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,39,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21101,973,0,0,1106,0,786,99,109,-7,2106,0,0,109,6,21102,0,1,-4,21101,0,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21102,1,-4,-2,1106,0,1041,21101,0,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1202,-2,1,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2101,0,-2,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,0,439,1,1106,0,1150,21102,477,1,1,1106,0,1150,21101,0,514,1,21101,0,1149,0,1105,1,579,99,21101,1157,0,0,1106,0,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1201,-5,0,1176,1201,-4,0,0,109,-6,2106,0,0,0,5,24,1,3,1,24,1,3,1,24,1,3,1,24,1,3,5,9,12,7,1,9,1,9,2,7,1,9,1,9,2,7,1,9,1,9,2,7,1,9,1,5,6,7,1,9,1,5,1,4,11,7,1,5,1,12,1,1,1,7,1,5,1,6,11,1,11,12,1,1,1,1,1,1,1,3,1,18,11,20,1,1,1,1,1,22,11,18,1,1,1,1,1,1,1,3,1,16,11,1,1,16,1,1,1,1,1,1,1,1,1,1,1,1,1,10,11,1,1,1,1,1,1,1,1,10,1,5,1,1,1,3,1,1,1,1,1,1,1,10,1,5,7,1,5,10,1,7,1,7,1,12,1,7,1,7,1,20,1,7,1,20,11,26,1,1,1,26,5,26,1,1,1,26,1,1,1,26,1,1,1,18,5,3,1,1,1,18,1,3,1,3,1,1,1,18,1,3,1,3,1,1,1,18,1,3,1,3,1,1,1,18,1,3,5,1,1,18,1,9,1,18,11,8
	*/
	/*
An early warning system detects an incoming solar flare and automatically activates the ship's electromagnetic shield. Unfortunately, this has cut off the Wi-Fi for many small robots that, unaware of the impending danger, are now trapped on exterior scaffolding on the unsafe side of the shield. To rescue them, you'll have to act quickly!

The only tools at your disposal are some wired cameras and a small vacuum robot currently asleep at its charging station. The video quality is poor, but the vacuum robot has a needlessly bright LED that makes it easy to spot no matter where it is.

An Intcode program, the Aft Scaffolding Control and Information Interface (ASCII, your puzzle input), provides access to the cameras and the vacuum robot. Currently, because the vacuum robot is asleep, you can only access the cameras.

Running the ASCII program on your Intcode computer will provide the current view of the scaffolds. This is output, purely coincidentally, as ASCII code: 35 means #, 46 means ., 10 starts a new line of output below the current one, and so on. (Within a line, characters are drawn left-to-right.)

In the camera output, # represents a scaffold and . represents open space. The vacuum robot is visible as ^, v, <, or > depending on whether it is facing up, down, left, or right respectively. When drawn like this, the vacuum robot is always on a scaffold; if the vacuum robot ever walks off of a scaffold and begins tumbling through space uncontrollably, it will instead be visible as X.

In general, the scaffold forms a path, but it sometimes loops back onto itself. For example, suppose you can see the following view from the cameras:

..#..........
..#..........
#######...###
#.#...#...#.#
#############
..#...#...#..
..#####...^..
Here, the vacuum robot, ^ is facing up and sitting at one end of the scaffold near the bottom-right of the image. The scaffold continues up, loops across itself several times, and ends at the top-left of the image.

The first step is to calibrate the cameras by getting the alignment parameters of some well-defined points. Locate all scaffold intersections; for each, its alignment parameter is the distance between its left edge and the left edge of the view multiplied by the distance between its top edge and the top edge of the view. Here, the intersections from the above image are marked O:

..#..........
..#..........
##O####...###
#.#...#...#.#
##O###O###O##
..#...#...#..
..#####...^..
For these intersections:

The top-left intersection is 2 units from the left of the image and 2 units from the top of the image, so its alignment parameter is 2 * 2 = 4.
The bottom-left intersection is 2 units from the left and 4 units from the top, so its alignment parameter is 2 * 4 = 8.
The bottom-middle intersection is 6 from the left and 4 from the top, so its alignment parameter is 24.
The bottom-right intersection's alignment parameter is 40.
To calibrate the cameras, you need the sum of the alignment parameters. In the above example, this is 76.

Run your ASCII program. What is the sum of the alignment parameters for the scaffold intersections?
	*/
Part1(FileName="",Data="") PUBLIC
{
	if '$length(Data) {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
		if ($order(RecordsArr(""))'=1)||($order(RecordsArr(""),-1)'=1) {
			write !,"Wrong data was red from "_FileName
			quit 0
		}
		set Data=RecordsArr(1)
	}
	set OriginalData=Data
	quit:'$$CheckData(Data)
	kill ^mtempSORT($zname,"Part1")
	set ^mtempSORT($zname,"Part1","LocationX")=1
	set ^mtempSORT($zname,"Part1","LocationY")=1
	set ^mtempSORT($zname,"PartKey")="Part1"
	do ComputeSignalCode(Data,,.ERR,,0,,,"Output") ;,"Input")
	quit:$length(ERR) 0
	//for i=1:1:65 write !
	//do DisplayGrid("Part1")
	set Total=0
	set LocationY="" for  {
		set LocationY=$order(^mtempSORT($zname,"Part1","grid",LocationY)) quit:LocationY=""
		set LocationX="" for  {
			set LocationX=$order(^mtempSORT($zname,"Part1","grid",LocationY,LocationX)) quit:LocationX=""
			set Val=^mtempSORT($zname,"Part1","grid",LocationY,LocationX)
			continue:Val'="#"
			set Count=0
			if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX+1))="#" set Count=Count+1
			if $get(^mtempSORT($zname,"Part1","grid",LocationY,LocationX-1))="#" set Count=Count+1
			if $get(^mtempSORT($zname,"Part1","grid",LocationY+1,LocationX))="#" set Count=Count+1
			if $get(^mtempSORT($zname,"Part1","grid",LocationY-1,LocationX))="#" set Count=Count+1
			if Count'>2 continue
			set Total=Total+((LocationY-1)*(LocationX-1))
			//w !,"Intersection @",LocationX,"x",LocationY
		}
	}
	//w !
	quit $listbuild(Total,OriginalData)
}
DisplayGrid(PartKey)
{
	set LocationY="" for  {
		set LocationY=$order(^mtempSORT($zname,PartKey,"grid",LocationY)) quit:LocationY=""
		set LocationX="" for  {
			set LocationX=$order(^mtempSORT($zname,PartKey,"grid",LocationY,LocationX)) quit:LocationX=""
			set Val=^mtempSORT($zname,PartKey,"grid",LocationY,LocationX)
			//write *27,*41,*76,*27,*91,LocationY,*59,LocationX,*102,*27,*41,*74,Val
		}
	}
}
Input(Line)
	/*
	set ^mtempSORT($zname,"Part2","Commands","Current")=""
	set ^mtempSORT($zname,"Part2","Commands","Main")=MainCommand
	set ^mtempSORT($zname,"Part2","Commands","A")=CommandA
	set ^mtempSORT($zname,"Part2","Commands","B")=CommandB
	set ^mtempSORT($zname,"Part2","Commands","C")=CommandC
	*/
	set CurrentCommand=^mtempSORT($zname,"Part2","Commands","Current"),IndexCommand=^mtempSORT($zname,"Part2","Commands","Index")
	set IndexCommand=IndexCommand+1
	set Command=^mtempSORT($zname,"Part2","Commands",CurrentCommand)
	if IndexCommand>$length(Command) {
		w Command,!
		set NextCommand=$case(CurrentCommand,"Main":"A","A":"B","B":"C",:"Video")
		//if NextCommand="Video" set (^mtempSORT($zname,PartKey,"LocationX"),^mtempSORT($zname,PartKey,"LocationY"))=1
		set ^mtempSORT($zname,"Part2","Commands","Current")=NextCommand
		set ^mtempSORT($zname,"Part2","Commands","Index")=0
		quit 10
	}
	set Val=$ascii(Command,IndexCommand)
	set ^mtempSORT($zname,"Part2","Commands","Index")=IndexCommand
	quit Val
	/*
	//W !,Command_$char(10)
	read Command
	quit Command_$C(10)
	w !,"Enter command for "_NextCommand_": " r Command
	set CommandOutput=""
	for i=1:1:$length(Command) set CommandOutput=CommandOutput_$ascii(Command,i)
	set CommandOutput=CommandOutput_10 //$c(10)???
	write !,CommandOutput,!!!
	//set CommandOutput=CommandOutput_10
	quit "65," ;CommandOutput
	;*/
Output(Line,Val)	;
	set PartKey=^mtempSORT($zname,"PartKey")
	set LocationX=^mtempSORT($zname,PartKey,"LocationX")
	set LocationY=^mtempSORT($zname,PartKey,"LocationY")
	set ^mtempSORT($zname,PartKey,"LastVal")=Val
	if PartKey="Part2" /*,^mtempSORT($zname,"Part2","Commands","Current")'="Video"*/ write $char(Val) write:Val=10 $char(13)
	if Val'=10 {
		set Val=$char(Val)
		if (Val="^")||(Val="v")||(Val="<")||(Val=">") {
			set ^mtempSORT($zname,PartKey,"Robot")=LocationX_","_LocationY_","_Val
			if PartKey="Part1" set Val="#"
		}
		set ^mtempSORT($zname,PartKey,"grid",LocationY,LocationX)=Val
		set LocationX=LocationX+1
	}
	if Val=10 {
		set LocationX=1,LocationY=LocationY+1
		//I PartKey="Part2",LocationY>$O(^mtempSORT($zname,"Part1","grid",""),-1)
	}
	set ^mtempSORT($zname,PartKey,"LocationX")=LocationX
	set ^mtempSORT($zname,PartKey,"LocationY")=LocationY
	//if PartKey="Part2",^mtempSORT($zname,"Part2","Commands","Current")="Video",LocationY=$order(^mtempSORT($zname,PartKey,"grid",""),-1),LocationX=$order(^mtempSORT($zname,PartKey,"grid",1,""),-1) do DisplayGrid(PartKey)
	//W $c(Val)
	//i Val=10 w $c(13)
	quit
    ;              1     2     3        4                   5          6      7        8               9
ComputeSignalCode(Data,Inputs,ERR,InstructionPointer=1,ExitOpCode4=0,ExitSW,Output,OutputLabel="",InputLabel="")
{
	set OpCode="",ERR="",DiagnosticCode="",InputId=0,ExitSW=0,Offset=0,Line=0
	//w !,"Data before: ",Data
	while OpCode'=99&&'$length(ERR)&&'ExitSW {
		s ^mtempSORT($zn,"Part2","Data","startofloop")=Data
		if Data[",," for i=1:1:$length(Data,",") if $piece(Data,",",i)="" set $piece(Data,",",i)=0
		set Instruction=$piece(Data,",",InstructionPointer)
		;W !,Instruction,"@",InstructionPointer
		if Instruction'?1.5n {
			set ERR="Wrong instruction "_Instruction
			quit 
		}
		set OpCode=+$extract(Instruction,*-1,*)
		s ^mtempSORT($zn,"Part2","Data",OpCode,"Instruction")=Instruction
		s ^mtempSORT($zn,"Part2","Data",OpCode,"Start")=Data
		if ",1,2,3,4,5,6,7,8,9,99,"'[(","_OpCode_",") {
			set ERR="Unknown operation "_OpCode
			quit
		}
		set ParametersMode=$extract(Instruction,1,*-2)
		//w !,"Instruction=",Instruction,";","Offset=",Offset
		if OpCode=99
		{
			if $length(ParametersMode) set ERR="Exit operation with parmaters "_ParametersMode
			set ExitSW=1
			//write !,"Finish computing, exiting code",!!
			quit
		}
		if OpCode=1
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1) ;W !,"<",Val1
			set Val2=$piece(Data,",",InstructionPointer+2) ;W !,"<",Val2
			set OutPos=$piece(Data,",",InstructionPointer+3) ;W !,"<",OutPos
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1) ;W !,"@",Val1
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1) ;W !,"@",Val2
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1) ;W !,"@",Val1
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1) ;W !,"@",Val2
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1) ;W !,"@",OutPos
			set Val=Val1+Val2
			;w !,Val_">"_OutPos
			//w !,"Operation 1>>Add "_Val1_"+"_Val2_" and store it in "_OutPos
			//w !,"Data before "_Data
			set $piece(Data,",",OutPos+1)=Val
			//w !,"Data after "_Data
			set InstructionPointer=InstructionPointer+4
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		if OpCode=2
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set $piece(Data,",",OutPos+1)=Val1*Val2
			set InstructionPointer=InstructionPointer+4
			s ^mtempSORT($zn,"Part2","Data",$i(^mtempSORT($zn)))=Data
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		if OpCode=3
		{
			if $extract(ParametersMode,1,*-1)||(ParametersMode=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set OutPos=$piece(Data,",",InstructionPointer+1)
			if $extract(ParametersMode,*)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set InputId=InputId+1
			if $data(Inputs(InputId)) {
				set Val=Inputs(InputId)
			}
			elseif $length(InputLabel) {
				set Val=$$Input(Line)
			}
			else {
				read !,"Please enter value: ",Val
				write !
			}
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+2
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		if OpCode=4
		{
			if $extract(ParametersMode,1,*-1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			set:'$length(Val) Val=0
			set Line=Line+1
			if '$data(Output) {
				if $length(OutputLabel) do @(OutputLabel_"("_Line_","_$select((Val?1.N)&&($extract(Val)||(Val=0)):Val,1:""""_Val_"""")_")")
				write:'$length(OutputLabel) !,Val
			}
			else {
				set Output(Line)=Val
			}
			set DiagnosticCode=Val
			set InstructionPointer=InstructionPointer+2
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			quit:ExitOpCode4
			continue
		}
		if OpCode=5
		{
			if $extract(ParametersMode,1,*-2) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			if Val {
				set InstructionPointer=$piece(Data,",",InstructionPointer+2)
				if '$extract(ParametersMode,*-1) set InstructionPointer=$piece(Data,",",InstructionPointer+1)
				if $extract(ParametersMode,*-1)=2 set InstructionPointer=$piece(Data,",",InstructionPointer+Offset+1)
				set InstructionPointer=InstructionPointer+1
				s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
				continue
			}
			set InstructionPointer=InstructionPointer+3
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		if OpCode=6
		{
			if $extract(ParametersMode,1,*-2) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			if 'Val {
				set InstructionPointer=$piece(Data,",",InstructionPointer+2)
				if '$extract(ParametersMode,*-1) set InstructionPointer=$piece(Data,",",InstructionPointer+1)
				if $extract(ParametersMode,*-1)=2 set InstructionPointer=$piece(Data,",",InstructionPointer+Offset+1)
				set InstructionPointer=InstructionPointer+1
				s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
				continue
			}
			set InstructionPointer=InstructionPointer+3
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		if OpCode=7
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set Val=Val1<Val2
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+4
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		if OpCode=8
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set:'$length(Val1) Val1=0
			set:'$length(Val2) Val2=0
			set Val=Val1=Val2
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+4
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		if OpCode=9
		{
			if $extract(ParametersMode,1,*-1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			set Offset=Offset+Val
			set InstructionPointer=InstructionPointer+2
			s ^mtempSORT($zn,"Part2","Data",OpCode,"End")=Data
			continue
		}
		set ERR="Unknown operation for instruction "_Instruction
		quit
	}
	if $length(ERR) {
		write !,ERR
		quit 0
	}
	//w !,"Data after: ",Data
	//write !,"Diagnostic Code is: "_DiagnosticCode
	quit DiagnosticCode
}

	/*
Now for the tricky part: notifying all the other robots about the solar flare. The vacuum robot can do this automatically if it gets into range of a robot. However, you can't see the other robots on the camera, so you need to be thorough instead: you need to make the vacuum robot visit every part of the scaffold at least once.

The vacuum robot normally wanders randomly, but there isn't time for that today. Instead, you can override its movement logic with new rules.

Force the vacuum robot to wake up by changing the value in your ASCII program at address 0 from 1 to 2. When you do this, you will be automatically prompted for the new movement rules that the vacuum robot should use. The ASCII program will use input instructions to receive them, but they need to be provided as ASCII code; end each line of logic with a single newline, ASCII code 10.

First, you will be prompted for the main movement routine. The main routine may only call the movement functions: A, B, or C. Supply the movement functions to use as ASCII text, separating them with commas (,, ASCII code 44), and ending the list with a newline (ASCII code 10). For example, to call A twice, then alternate between B and C three times, provide the string A,A,B,C,B,C,B,C and then a newline.

Then, you will be prompted for each movement function. Movement functions may use L to turn left, R to turn right, or a number to move forward that many units. Movement functions may not call other movement functions. Again, separate the actions with commas and end the list with a newline. For example, to move forward 10 units, turn left, move forward 8 units, turn right, and finally move forward 6 units, provide the string 10,L,8,R,6 and then a newline.

Finally, you will be asked whether you want to see a continuous video feed; provide either y or n and a newline. Enabling the continuous video feed can help you see what's going on, but it also requires a significant amount of processing power, and may even cause your Intcode computer to overheat.

Due to the limited amount of memory in the vacuum robot, the ASCII definitions of the main routine and the movement functions may each contain at most 20 characters, not counting the newline.

For example, consider the following camera feed:

#######...#####
#.....#...#...#
#.....#...#...#
......#...#...#
......#...###.#
......#.....#.#
^########...#.#
......#.#...#.#
......#########
........#...#..
....#########..
....#...#......
....#...#......
....#...#......
....#####......
In order for the vacuum robot to visit every part of the scaffold at least once, one path it could take is:

R,8,R,8,R,4,R,4,R,8,L,6,L,2,R,4,R,4,R,8,R,8,R,8,L,6,L,2
Without the memory limit, you could just supply this whole string to function A and have the main routine call A once. However, you'll need to split it into smaller parts.

One approach is:

Main routine: A,B,C,B,A,C
(ASCII input: 65, 44, 66, 44, 67, 44, 66, 44, 65, 44, 67, 10)
Function A:   R,8,R,8
(ASCII input: 82, 44, 56, 44, 82, 44, 56, 10)
Function B:   R,4,R,4,R,8
(ASCII input: 82, 44, 52, 44, 82, 44, 52, 44, 82, 44, 56, 10)
Function C:   L,6,L,2
(ASCII input: 76, 44, 54, 44, 76, 44, 50, 10)
Visually, this would break the desired path into the following parts:

A,        B,            C,        B,            A,        C
R,8,R,8,  R,4,R,4,R,8,  L,6,L,2,  R,4,R,4,R,8,  R,8,R,8,  L,6,L,2

CCCCCCA...BBBBB
C.....A...B...B
C.....A...B...B
......A...B...B
......A...CCC.B
......A.....C.B
^AAAAAAAA...C.B
......A.A...C.B
......AAAAAA#AB
........A...C..
....BBBB#BBBB..
....B...A......
....B...A......
....B...A......
....BBBBA......
Of course, the scaffolding outside your ship is much more complex.

As the vacuum robot finds other robots and notifies them of the impending solar flare, it also can't help but leave them squeaky clean, collecting any space dust it finds. Once it finishes the programmed set of movements, assuming it hasn't drifted off into space, the cleaning robot will return to its docking station and report the amount of space dust it collected as a large, non-ASCII value in a single output instruction.

After visiting every part of the scaffold at least once, how much dust does the vacuum robot report it has collected?
	*/
Part2(FileName="",Data="") PUBLIC
{
	set Answer=$$Part1(FileName,.Data)
	set Total=$list(Answer,1),OriginalData=$list(Answer,2)
	if 'Total quit 0
	if $extract(Data)'=1 {
		write !,"Wrong data"
		quit 0
	}
	set RobotData=$get(^mtempSORT("YUVGZ201917","Part1","Robot"))
	if '$length(RobotData) {
		write !,"Missing robot data (direction & location)"
		quit 0
	}
	if RobotData'?1.n1","1.n1","1(1"^",1"v",1"<",1">") {
		write !,"Wrong robot data ("_RobotData_")"
		quit 0
	}
	kill ^mtempSORT($zname,"Part2")
	merge ^mtempSORT($zname,"Part2")=^mtempSORT($zname,"Part1")
	/*set ^mtempSORT($zname,"Part2","LocationX")=1
	set ^mtempSORT($zname,"Part2","LocationY")=1*/
	set ^mtempSORT($zname,"PartKey")="Part2"
	
	set ^mtempSORT($zname,"Part2","LocationX")=$piece(RobotData,",",1)
	set ^mtempSORT($zname,"Part2","LocationY")=$piece(RobotData,",",2)
	set ^mtempSORT($zname,"Part2","grid",$piece(RobotData,",",2),$piece(RobotData,",",1))=$piece(RobotData,",",3)
	for i=1:1:65 write !
	do DisplayGrid("Part2")
	set String=$$ComputeCommands()
	set MainCommand=$$LoadCommands(String,.CommandA,.CommandB,.CommandC)
	set ^mtempSORT($zname,"PartKey")="Part2"
	kill ^mtempSORT($zname,"Part2")
	set ^mtempSORT($zname,"Part2","LocationX")=1
	set ^mtempSORT($zname,"Part2","LocationY")=1
	set ^mtempSORT($zname,"Part2","Commands","Current")="Main"
	set ^mtempSORT($zname,"Part2","Commands","Main")=MainCommand
	set ^mtempSORT($zname,"Part2","Commands","A")=CommandA
	set ^mtempSORT($zname,"Part2","Commands","B")=CommandB
	set ^mtempSORT($zname,"Part2","Commands","C")=CommandC
	set ^mtempSORT($zname,"Part2","Commands","Video")="n" //="y" is fun but very slow 'cause it writing all the outputs everytime
	set ^mtempSORT($zname,"Part2","Commands","Index")=0
	W !,String,!
	zwrite ^mtempSORT($zname,"Part2","Commands")
	set StopRunning=0,ERR=""
	set Data=OriginalData
	set $extract(Data)=2
	for  {
		do ComputeSignalCode(.Data,,.ERR,,0,.StopRunning,,"Output","Input")
		w !!!,"StopRunning=",StopRunning,!
		set Total=^mtempSORT($zname,"Part2","LastVal")
		quit:StopRunning
		quit:$length(ERR)
	}
	quit:$length(ERR) 0
	write !
	quit Total

}
ComputeCommands()
{
	set RobotData=^mtempSORT("YUVGZ201917","Part2","Robot")
	set LocationX=$piece(RobotData,",",1),LocationY=$piece(RobotData,",",2),Direction=$piece(RobotData,",",3)
	set Command=""
	for  {
		set NewLocationX=LocationX,NewLocationY=LocationY
		for Counter=0:1 {
			if Direction="^" set NewLocationY=NewLocationY-1
			if Direction="v" set NewLocationY=NewLocationY+1
			if Direction="<" set NewLocationX=NewLocationX-1
			if Direction=">" set NewLocationX=NewLocationX+1
			set NextTile=$get(^mtempSORT($zname,"Part2","grid",NewLocationY,NewLocationX))
			if NextTile'="#",NextTile'="Z" {
				set NewLocationX=LocationX,NewLocationY=LocationY
				quit
			}
			set ^mtempSORT($zname,"Part2","grid",NewLocationY,NewLocationX)="Z"
			set LocationX=NewLocationX,LocationY=NewLocationY
			do DisplayGrid("Part2")
			//h 1
		}
		if Counter set Command=Command_Counter_","
		set TotalLeft=$$GetTotalLeft()
		quit:'TotalLeft
		set NewDirection="",CommandDirection=""
		//write !,TotalLeft,";",Direction,";",LocationX,"x",LocationY,?20,"Command=",Command h 1
		if Direction="^" {
			if $get(^mtempSORT($zname,"Part2","grid",NewLocationY,NewLocationX+1))="#" {
				set NewDirection=">",CommandDirection="R"
			}
			else {
				set NewDirection="<",CommandDirection="L"
			}
		}
		if Direction="v" {
			if $get(^mtempSORT($zname,"Part2","grid",NewLocationY,NewLocationX-1))="#" {
				set NewDirection="<",CommandDirection="R"
			}
			else {
				set NewDirection=">",CommandDirection="L"
			}
		}
		if Direction="<" {
			if $get(^mtempSORT($zname,"Part2","grid",NewLocationY-1,NewLocationX))="#" {
				set NewDirection="^",CommandDirection="R"
			}
			else {
				set NewDirection="v",CommandDirection="L"
			}
		}
		if Direction=">" {
			if $get(^mtempSORT($zname,"Part2","grid",NewLocationY+1,NewLocationX))="#" {
				set NewDirection="v",CommandDirection="R"
			}
			else {
				set NewDirection="^",CommandDirection="L"
			}
		}
		quit:'$length(NewDirection)
		set Command=Command_CommandDirection_","
		set Direction=NewDirection
	}
	set $extract(Command,$length(Command))=""
	quit Command
}
GetTotalLeft()
{
	set Total=0
	set LocationY="" for  {
		set LocationY=$order(^mtempSORT($zname,"Part2","grid",LocationY)) quit:LocationY=""
		set LocationX="" for  {
			set LocationX=$order(^mtempSORT($zname,"Part2","grid",LocationY,LocationX)) quit:LocationX=""
			set Val=^mtempSORT($zname,"Part2","grid",LocationY,LocationX)
			continue:Val'="#"
			set Total=Total+1
		}
	}
	quit Total
}
LoadCommands(String,CommandA,CommandB,CommandC)
{
	for I=1:2:$length(String,",") set Commands($piece(String,",",I,I+1))=""
	set Command="" for CommandNum=1:1 {
		set Command=$order(Commands(Command)) quit:Command=""
		set Commands(Command)=CommandNum
	}
	ZW Commands
	//TODO: Need to extract commands from string, BUT HOW???
	set CommandA="R,10,R,10,R,6,R,4"
	set CommandB="R,10,R,10,L,4"
	set CommandC="R,4,L,4,L,10,L,10"
	;
	set NewString=String
	set NewString=$replace(NewString,CommandA,"A")
	set NewString=$replace(NewString,CommandB,"B")
	set NewString=$replace(NewString,CommandC,"C")
	quit NewString
}
CheckData(Data)
{
	if $length(Data,",")<2,Data'=99 {
		write !,"Wrong data "_Data
		quit 0
	}
	set ERR=""
	for Location=1:1:$length(Data,",") {
		set Val=$piece(Data,",",Location)
		if Val'?.1"-"1.n {
			set ERR="Wrong value "_val
			write !,ERR
			quit
		}
	}
	quit:$length(ERR) 0
	quit 1
}
LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::2 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		if $length(Record) set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
