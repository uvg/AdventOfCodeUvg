ROUTINE YUVGZ201919 [Type=INT]
YUVGZ201919	;https://adventofcode.com/2019/day/19;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
109,424,203,1,21102,1,11,0,1105,1,282,21102,1,18,0,1105,1,259,2102,1,1,221,203,1,21101,31,0,0,1105,1,282,21101,38,0,0,1105,1,259,20102,1,23,2,21201,1,0,3,21102,1,1,1,21101,57,0,0,1106,0,303,2101,0,1,222,20101,0,221,3,21001,221,0,2,21101,259,0,1,21101,80,0,0,1106,0,225,21102,1,97,2,21102,1,91,0,1105,1,303,1201,1,0,223,20102,1,222,4,21101,259,0,3,21101,225,0,2,21102,1,225,1,21102,1,118,0,1106,0,225,21001,222,0,3,21102,1,21,2,21102,133,1,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21101,0,148,0,1105,1,259,1201,1,0,223,20101,0,221,4,21001,222,0,3,21101,14,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,106,0,109,20207,1,223,2,20102,1,23,1,21102,-1,1,3,21101,0,214,0,1106,0,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,21201,-3,0,1,21202,-2,1,2,21201,-1,0,3,21101,0,250,0,1106,0,225,22101,0,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2105,1,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21202,-2,1,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21101,0,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21102,1,384,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21202,1,1,-4,109,-5,2106,0,0
	*/
	/*
Unsure of the state of Santa's ship, you borrowed the tractor beam technology from Triton. Time to test it out.

When you're safely away from anything else, you activate the tractor beam, but nothing happens. It's hard to tell whether it's working if there's nothing to use it on. Fortunately, your ship's drone system can be configured to deploy a drone to specific coordinates and then check whether it's being pulled. There's even an Intcode program (your puzzle input) that gives you access to the drone system.

The program uses two input instructions to request the X and Y position to which the drone should be deployed. Negative numbers are invalid and will confuse the drone; all numbers should be zero or positive.

Then, the program will output whether the drone is stationary (0) or being pulled by something (1). For example, the coordinate X=0, Y=0 is directly in front of the tractor beam emitter, so the drone control program will always report 1 at that location.

To better understand the tractor beam, it is important to get a good picture of the beam itself. For example, suppose you scan the 10x10 grid of points closest to the emitter:

       X
  0->      9
 0#.........
 |.#........
 v..##......
  ...###....
  ....###...
Y .....####.
  ......####
  ......####
  .......###
 9........##
In this example, the number of points affected by the tractor beam in the 10x10 area closest to the emitter is 27.

However, you'll need to scan a larger area to understand the shape of the beam. How many points are affected by the tractor beam in the 50x50 area closest to the emitter? (For each of X and Y, this will be 0 through 49.)
	*/
Part1(FileName="",Data="") PUBLIC
{
	if '$length(Data) {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
		if ($order(RecordsArr(""))'=1)||($order(RecordsArr(""),-1)'=1) {
			write !,"Wrong data was red from "_FileName
			quit 0
		}
		set Data=RecordsArr(1)
	}
	quit:'$$CheckData(Data)
	set ^mtempSORT($zname,"PartKey")="Part1"
	kill ^mtempSORT($zname,"Part1")
	set ^mtempSORT($zname,"Part1","LocationX")=0
	set ^mtempSORT($zname,"Part1","LocationY")=0
	set ^mtempSORT($zname,"Part1","CurrentInstruction")=0
	set MaxSize=50
	set ^mtempSORT($zname,"Part1","MaxSize")=MaxSize
	write 0,?5
	for  {
		do ComputeSignalCode(Data,,.ERR,,0,.ExitSW,,"Output","Input")
		quit:$length(ERR)
		quit:^mtempSORT($zname,"Part1","LocationY")+1>MaxSize
	}
	quit:$length(ERR) 0
	set LocationY="",Counter=0 for  {
		set LocationY=$order(^mtempSORT($zname,"Part1","grid",LocationY)) quit:LocationY=""
		set String=^mtempSORT($zname,"Part1","grid",LocationY)
		set Counter=Counter+$length($translate(String,"0 "))
	}
	//W !,"ExitSW=",ExitSW
	quit Counter
}
    ;              1     2     3        4                   5          6      7        8               9
ComputeSignalCode(Data,Inputs,ERR,InstructionPointer=1,ExitOpCode4=0,ExitSW,Output,OutputLabel="",InputLabel="")
{
	set OpCode="",ERR="",DiagnosticCode="",InputId=0,ExitSW=0,Offset=0,Line=0
	//w !,"Data before: ",Data
	while OpCode'=99&&'$length(ERR)&&'ExitSW {
		if Data[",," for i=1:1:$length(Data,",") if $piece(Data,",",i)="" set $piece(Data,",",i)=0
		set Instruction=$piece(Data,",",InstructionPointer)
		;W !,Instruction,"@",InstructionPointer
		if Instruction'?1.5n {
			set ERR="Wrong instruction "_Instruction
			quit 
		}
		set OpCode=+$extract(Instruction,*-1,*)
		if ",1,2,3,4,5,6,7,8,9,99,"'[(","_OpCode_",") {
			set ERR="Unknown operation "_OpCode
			quit
		}
		set ParametersMode=$extract(Instruction,1,*-2)
		//w !,"Instruction=",Instruction,";","Offset=",Offset
		if OpCode=99
		{
			if $length(ParametersMode) set ERR="Exit operation with parmaters "_ParametersMode
			set ExitSW=1
			//write !,"Finish computing, exiting code",!!
			quit
		}
		if OpCode=1
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1) ;W !,"<",Val1
			set Val2=$piece(Data,",",InstructionPointer+2) ;W !,"<",Val2
			set OutPos=$piece(Data,",",InstructionPointer+3) ;W !,"<",OutPos
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1) ;W !,"@",Val1
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1) ;W !,"@",Val2
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1) ;W !,"@",Val1
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1) ;W !,"@",Val2
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1) ;W !,"@",OutPos
			set Val=Val1+Val2
			;w !,Val_">"_OutPos
			//w !,"Operation 1>>Add "_Val1_"+"_Val2_" and store it in "_OutPos
			//w !,"Data before "_Data
			set $piece(Data,",",OutPos+1)=Val
			//w !,"Data after "_Data
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=2
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set $piece(Data,",",OutPos+1)=Val1*Val2
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=3
		{
			if $extract(ParametersMode,1,*-1)||(ParametersMode=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set OutPos=$piece(Data,",",InstructionPointer+1)
			if $extract(ParametersMode,*)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set InputId=InputId+1
			if $data(Inputs(InputId)) {
				set Val=Inputs(InputId)
			}
			else {
				if $length(InputLabel) {
					set Val=$$@(InputLabel)(Line)
				}
				else {
					read !,"Please enter value: ",Val
					write !
				}
			}
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+2
			continue
		}
		if OpCode=4
		{
			if $extract(ParametersMode,1,*-1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			set:'$length(Val) Val=0
			set Line=Line+1
			if '$data(Output) {
				if $length(OutputLabel) do @(OutputLabel_"("_Line_","_Val_")")
				write:'$length(OutputLabel) !,Val
			}
			else {
				set Output(Line)=Val
			}
			set DiagnosticCode=Val
			set InstructionPointer=InstructionPointer+2
			quit:ExitOpCode4
			continue
		}
		if OpCode=5
		{
			if $extract(ParametersMode,1,*-2) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			if Val {
				set InstructionPointer=$piece(Data,",",InstructionPointer+2)
				if '$extract(ParametersMode,*-1) set InstructionPointer=$piece(Data,",",InstructionPointer+1)
				if $extract(ParametersMode,*-1)=2 set InstructionPointer=$piece(Data,",",InstructionPointer+Offset+1)
				set InstructionPointer=InstructionPointer+1
				continue
			}
			set InstructionPointer=InstructionPointer+3
			continue
		}
		if OpCode=6
		{
			if $extract(ParametersMode,1,*-2) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			if 'Val {
				set InstructionPointer=$piece(Data,",",InstructionPointer+2)
				if '$extract(ParametersMode,*-1) set InstructionPointer=$piece(Data,",",InstructionPointer+1)
				if $extract(ParametersMode,*-1)=2 set InstructionPointer=$piece(Data,",",InstructionPointer+Offset+1)
				set InstructionPointer=InstructionPointer+1
				continue
			}
			set InstructionPointer=InstructionPointer+3
			continue
		}
		if OpCode=7
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set Val=Val1<Val2
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=8
		{
			if $extract(ParametersMode,1,*-2)>2||($extract(ParametersMode,*-2)=1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val1=$piece(Data,",",InstructionPointer+1)
			set Val2=$piece(Data,",",InstructionPointer+2)
			set OutPos=$piece(Data,",",InstructionPointer+3)
			if '$extract(ParametersMode,*) set Val1=$piece(Data,",",Val1+1)
			if '$extract(ParametersMode,*-1) set Val2=$piece(Data,",",Val2+1)
			if $extract(ParametersMode,*)=2 set Val1=$piece(Data,",",Val1+Offset+1)
			if $extract(ParametersMode,*-1)=2 set Val2=$piece(Data,",",Val2+Offset+1)
			if $extract(ParametersMode,*-2)=2 set OutPos=OutPos+Offset ;$piece(Data,",",OutPos+Offset+1)
			set:'$length(Val1) Val1=0
			set:'$length(Val2) Val2=0
			set Val=Val1=Val2
			set $piece(Data,",",OutPos+1)=Val
			set InstructionPointer=InstructionPointer+4
			continue
		}
		if OpCode=9
		{
			if $extract(ParametersMode,1,*-1) {
				set ERR="Wrong parameter mode for output the instruction "_Instruction
				quit
			}
			set Val=$piece(Data,",",InstructionPointer+1)
			if '$extract(ParametersMode,*) set Val=$piece(Data,",",Val+1)
			if $extract(ParametersMode,*)=2 set Val=$piece(Data,",",Val+Offset+1)
			set Offset=Offset+Val
			set InstructionPointer=InstructionPointer+2
			continue
		}

		set ERR="Unknown operation for instruction "_Instruction
		quit
	}
	if $length(ERR) {
		write !,ERR
		quit 0
	}
	//w !,"Data after: ",Data
	//write !,"Diagnostic Code is: "_DiagnosticCode
	quit DiagnosticCode
}
	
	/*
You aren't sure how large Santa's ship is. You aren't even sure if you'll need to use this thing on Santa's ship, but it doesn't hurt to be prepared. You figure Santa's ship might fit in a 100x100 square.

The beam gets wider as it travels away from the emitter; you'll need to be a minimum distance away to fit a square of that size into the beam fully. (Don't rotate the square; it should be aligned to the same axes as the drone grid.)

For example, suppose you have the following tractor beam readings:

#.......................................
.#......................................
..##....................................
...###..................................
....###.................................
.....####...............................
......#####.............................
......######............................
.......#######..........................
........########........................
.........#########......................
..........#########.....................
...........##########...................
...........############.................
............############................
.............#############..............
..............##############............
...............###############..........
................###############.........
................#################.......
.................########OOOOOOOOOO.....
..................#######OOOOOOOOOO#....
...................######OOOOOOOOOO###..
....................#####OOOOOOOOOO#####
.....................####OOOOOOOOOO#####
.....................####OOOOOOOOOO#####
......................###OOOOOOOOOO#####
.......................##OOOOOOOOOO#####
........................#OOOOOOOOOO#####
.........................OOOOOOOOOO#####
..........................##############
..........................##############
...........................#############
............................############
.............................###########
In this example, the 10x10 square closest to the emitter that fits entirely within the tractor beam has been marked O. Within it, the point closest to the emitter (the only highlighted O) is at X=25, Y=20.

Find the 100x100 square closest to the emitter that fits entirely within the tractor beam; within that square, find the point closest to the emitter. What value do you get if you take that point's X coordinate, multiply it by 10000, then add the point's Y coordinate? (In the example above, this would be 250020.)
	*/
Part2(FileName="",Data="") PUBLIC
{
	if '$length(Data) {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
		if ($order(RecordsArr(""))'=1)||($order(RecordsArr(""),-1)'=1) {
			write !,"Wrong data was red from "_FileName
			quit 0
		}
		set Data=RecordsArr(1)
	}
	quit:'$$CheckData(Data)
	set MaxSize=1999 ;=105
	//kill ^mtempSORT($zname,"Part2")
	if '$data(^mtempSORT($zname,"Part2")) {
		set ^mtempSORT($zname,"Part2","LocationX")=0
		set ^mtempSORT($zname,"Part2","LocationY")=0
		set ^mtempSORT($zname,"Part2","CurrentInstruction")=0
		set ^mtempSORT($zname,"Part2","MaxSize")=MaxSize
		set ^mtempSORT($zname,"Part2","ZeroStart")=1
	}
	set ^mtempSORT($zname,"PartKey")="Part2"
	//write 0,?5
	set TractorBeamSize=100 ;=10
	set Calculation=0
	for  {
		do ComputeSignalCode(Data,,.ERR,,0,.ExitSW,,"Output","Input")
		quit:$length(ERR)
		set LocationY=^mtempSORT($zname,"Part2","LocationY")
		quit:LocationY+1>MaxSize
		set LocationX=^mtempSORT($zname,"Part2","LocationX")
		set gridData=$get(^mtempSORT($zname,"Part2","grid",LocationY))
		if LocationY*2>TractorBeamSize,LocationX>TractorBeamSize,$length($translate(gridData,"0 "))>TractorBeamSize {
			set Calculation=$$FindCorner(TractorBeamSize)
			quit:Calculation>0
		}
	}
	quit:$length(ERR) 0
	quit Calculation
}
FindCorner(Size) PUBLIC
{
	set LocationY=Size,Line=0,First1=0 for  {
		set LocationY=$order(^mtempSORT($zname,"Part2","grid",LocationY)) quit:LocationY=""
		set String=^mtempSORT($zname,"Part2","grid",LocationY)
		continue:$length($translate(String,"0 "))'>Size
		set First1=$find(String,1)-1
		set SW=1
		for tempY=LocationY:-1:(LocationY-Size+1) {
			set tempStr=^mtempSORT($zname,"Part2","grid",tempY)
			if $length($translate(String,"0 "))'>Size set SW=0 quit
			if $extract(tempStr,First1)'=1 set SW=0 quit
			if $extract(tempStr,First1+Size-1)'=1 set SW=0 quit
		}
		if SW set Line=LocationY quit
	}
	quit:'Line 0
	quit (First1-1)*10000+Line-Size+1
}
Input(Line)	;
	set PartKey=^mtempSORT($zname,"PartKey")
	set LocationX=^mtempSORT($zname,PartKey,"LocationX")
	set LocationY=^mtempSORT($zname,PartKey,"LocationY")
	set CurrentInstruction=^mtempSORT($zname,PartKey,"CurrentInstruction")
	set Val=LocationX if CurrentInstruction set Val=LocationY
	//w !,"Location=",LocationX,"x",LocationY,";Val=",Val
	set CurrentInstruction='CurrentInstruction
	set ^mtempSORT($zname,PartKey,"CurrentInstruction")=CurrentInstruction
	quit Val
Output(Line,Val)	;
	set MaxSize=^mtempSORT($zname,PartKey,"MaxSize")
	set LocationX=^mtempSORT($zname,PartKey,"LocationX")
	set LocationY=^mtempSORT($zname,PartKey,"LocationY")
	set ZeroStart=^mtempSORT($zname,PartKey,"ZeroStart")
	//set ^mtempSORT($zname,PartKey,"grid",LocationY)=$get(^mtempSORT($zname,PartKey,"grid",LocationY))_Val
	set $extract(^mtempSORT($zname,PartKey,"grid",LocationY),LocationX+1)=Val
	if Val=0,'ZeroStart set LocationX=MaxSize
	if Val=1 set ZeroStart=0
	//write Val
	set LocationX=LocationX+1
	if LocationX+1>MaxSize {
		set LocationX=$find(^mtempSORT($zname,PartKey,"grid",LocationY),1)-10 //No starting from zero!!
		set:LocationX<0 LocationX=0
		set LocationY=LocationY+1
		set ZeroStart=1
		//write !,LocationY,?5
	}
	set ^mtempSORT($zname,PartKey,"LocationX")=LocationX
	set ^mtempSORT($zname,PartKey,"LocationY")=LocationY
	//write !,"#",Line,"=",Val
	set ^mtempSORT($zname,PartKey,"ZeroStart")=ZeroStart
	quit

CheckData(Data)
{
	if $length(Data,",")<2,Data'=99 {
		write !,"Wrong data "_Data
		quit 0
	}
	set ERR=""
	for Location=1:1:$length(Data,",") {
		set Val=$piece(Data,",",Location)
		if Val'?1.n,Val'?1"-"1.n {
			set ERR="Wrong value "_val
			write !,ERR
			quit
		}
	}
	quit:$length(ERR) 0
	quit 1
}
LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::2 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		if $length(Record) set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
