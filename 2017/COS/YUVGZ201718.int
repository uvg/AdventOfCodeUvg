ROUTINE YUVGZ201718 [Type=INT]
YUVGZ201718	;https://adventofcode.com/2017/day/18;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
Input data:
set i 31
set a 1
mul p 17
jgz p p
mul a 2
add i -1
jgz i -2
add a -1
set i 127
set p 622
mul p 8505
mod p a
mul p 129749
add p 12345
mod p a
set b p
mod b 10000
snd b
add i -1
jgz i -9
jgz a 3
rcv b
jgz b -1
set f 0
set i 126
rcv a
rcv b
set p a
mul p -1
add p b
jgz p 4
snd a
set a b
jgz 1 3
snd b
set f 1
add i -1
jgz i -11
snd a
jgz f -16
jgz a -19
	*/
	/*
Year 2017, Day 18 part 1:
--- Day 18: Duet ---
You discover a tablet containing some strange assembly code labeled simply "Duet". Rather than bother the sound card with it, you decide to run the code yourself. Unfortunately, you don't see any documentation, so you're left to figure out what the instructions mean on your own.

It seems like the assembly is meant to operate on a set of registers that are each named with a single letter and that can each hold a single integer. You suppose each register should start with a value of 0.

There aren't that many instructions, so it shouldn't be hard to figure out what they do. Here's what you determine:

snd X plays a sound with a frequency equal to the value of X.
set X Y sets register X to the value of Y.
add X Y increases register X by the value of Y.
mul X Y sets register X to the result of multiplying the value contained in register X by the value of Y.
mod X Y sets register X to the remainder of dividing the value contained in register X by the value of Y (that is, it sets X to the result of X modulo Y).
rcv X recovers the frequency of the last sound played, but only when the value of X is not zero. (If it is zero, the command does nothing.)
jgz X Y jumps with an offset of the value of Y, but only if the value of X is greater than zero. (An offset of 2 skips the next instruction, an offset of -1 jumps to the previous instruction, and so on.)
Many of the instructions can take either a register (a single letter) or a number. The value of a register is the integer it contains; the value of a number is that number.

After each jump instruction, the program continues with the instruction to which the jump jumped. After any other instruction, the program continues with the next instruction. Continuing (or jumping) off either end of the program terminates it.

For example:

set a 1
add a 2
mul a a
mod a 5
snd a
set a 0
rcv a
jgz a -1
set a 1
jgz a -2
The first four instructions set a to 1, add 2 to it, square it, and then set it to itself modulo 5, resulting in a value of 4.
Then, a sound with frequency 4 (the value of a) is played.
After that, a is set to 0, causing the subsequent rcv and jgz instructions to both be skipped (rcv because a is 0, and jgz because a is not greater than 0).
Finally, a is set to 1, causing the next jgz instruction to activate, jumping back two instructions to another jump, which jumps again to the rcv, which ultimately triggers the recover operation.
At the time the recover operation is executed, the frequency of the last sound played is 4.

What is the value of the recovered frequency (the value of the most recently played sound) the first time a rcv instruction is executed with a non-zero value?
	*/
	/*
W $$Part1^YUVGZ201718(FN)
	//new (FileName,RecordsArr)
	*/
Part1(FileName="",RecordsArr) PUBLIC
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set IP=1,sound="",ANS=""
	for I=$ascii("a"):1:$ascii("z") set @$char(I)=0
	for  {
		quit:'$data(RecordsArr(IP))
		set Command=RecordsArr(IP)
		set Op=$piece(Command," ",1),val1=$piece(Command," ",2),val2=$piece(Command," ",3)
		if Op="snd" {
			set:val1?1L val1=@val1
			set sound=val1
			set IP=IP+1
			continue
		}
		if Op="set" {
			set:val2?1L val2=@val2
			set @val1=val2
			set IP=IP+1
			continue
		}
		if Op="add" {
			set:val2?1L val2=@val2
			set @val1=@val1+val2
			set IP=IP+1
			continue
		}
		if Op="mul" {
			set:val2?1L val2=@val2
			set @val1=@val1*val2
			set IP=IP+1
			continue
		}
		if Op="mod" {
			set:val2?1L val2=@val2
			set @val1=@val1#val2
			set IP=IP+1
			continue
		}
		if Op="rcv" {
			set:val1?1L val1=@val1
			if val1 {
				set ANS=sound
				quit
			}
			set IP=IP+1
			continue
		}
		if Op="jgz" {
			set:val1?1L val1=@val1
			set:val2?1L val2=@val2
			if val1>0 {
				set IP=IP+val2
				continue
			}
			set IP=IP+1
			continue
		}
	}
	//
	//
	//
	quit ANS
	/*
Year 2017, Day 18 part 2:
As you congratulate yourself for a job well done, you notice that the documentation has been on the back of the tablet this entire time. While you actually got most of the instructions correct, there are a few key differences. This assembly code isn't about sound at all - it's meant to be run twice at the same time.

Each running copy of the program has its own set of registers and follows the code independently - in fact, the programs don't even necessarily run at the same speed. To coordinate, they use the send (snd) and receive (rcv) instructions:

snd X sends the value of X to the other program. These values wait in a queue until that program is ready to receive them. Each program has its own message queue, so a program can never receive a message it sent.
rcv X receives the next value and stores it in register X. If no values are in the queue, the program waits for a value to be sent to it. Programs do not continue to the next instruction until they have received a value. Values are received in the order they are sent.
Each program also has its own program ID (one 0 and the other 1); the register p should begin with this value.

For example:

snd 1
snd 2
snd p
rcv a
rcv b
rcv c
rcv d
Both programs begin by sending three values to the other. Program 0 sends 1, 2, 0; program 1 sends 1, 2, 1. Then, each program receives a value (both 1) and stores it in a, receives another value (both 2) and stores it in b, and then each receives the program ID of the other program (program 0 receives 1; program 1 receives 0) and stores it in c. Each program now sees a different value in its own copy of register c.

Finally, both programs try to rcv a fourth time, but no data is waiting for either of them, and they reach a deadlock. When this happens, both programs terminate.

It should be noted that it would be equally valid for the programs to run at different speeds; for example, program 0 might have sent all three values and then stopped at the first rcv before program 1 executed even its first instruction.

Once both of your programs have terminated (regardless of what caused them to do so), how many times did program 1 send a value?
	*/
	/*
W $$Part2^YUVGZ201718(FN)
	*/
Part2(FileName="",RecordsArr) PUBLIC
{
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	kill ^Queue,^Instruction,^Send,^Finish,^Stop
	merge ^Instruction=RecordsArr
	job RunCode(0)
	job RunCode(1)
	for  quit:$get(^Finish(1))  hang .000001
	if '$get(^Finish(0)) {
		//Wait for program 0 to quit
		set TIMEOUT=11,HH=$zhorolog
		for  {
			quit:$get(^Finish(0))
			hang .000001
			quit:$zhorolog-HH>TIMEOUT
		}
		//If program 0 didn't quit try and force it to quit
		if '$get(^Finish(0)) {
			set ^Stop(0)=1
			set HH=$zhorolog
			for  {
				quit:$get(^Finish(0))
				hang .000001
				quit:$zhorolog-HH>TIMEOUT
			}
			if $zhorolog-HH>TIMEOUT w !,"couldn't stop program 0"
		}
	}
	set ANS=^Send(1) //Should be >127 and <15240
	write !,ANS
	kill ^Queue,^Instruction,^Send,^Finish,^Stop
	//
	//
	//
	quit ANS
}
RunCode(ID) PUBLIC
	new (ID)
	merge RecordsArr=^Instruction
	set IP=1,ANS="",^Send(ID)=0,^Finish(ID)=0
	for I=$ascii("a"):1:$ascii("z") set @$char(I)=0
	set p=ID
	for  {
		quit:'$data(RecordsArr(IP))
		quit:$data(^Stop(ID))
		set ^IP(ID)=IP
		set Command=RecordsArr(IP)
		set Op=$piece(Command," ",1),val1=$piece(Command," ",2),val2=$piece(Command," ",3)
		if Op="snd" {
			set:val1?1L val1=@val1
			set ^Queue('ID,$increment(^Queue))=val1
			set ^Send(ID)=^Send(ID)+1
			set IP=IP+1
			continue
		}
		if Op="set" {
			set:val2?1L val2=@val2
			set @val1=val2
			set IP=IP+1
			continue
		}
		if Op="add" {
			set:val2?1L val2=@val2
			set @val1=@val1+val2
			set IP=IP+1
			continue
		}
		if Op="mul" {
			set:val2?1L val2=@val2
			set @val1=@val1*val2
			set IP=IP+1
			continue
		}
		if Op="mod" {
			set:val2?1L val2=@val2
			set @val1=@val1#val2
			set IP=IP+1
			continue
		}
		if Op="rcv" {
			set HH=$zhorolog,TIMEOUT=10
			for  set key=$order(^Queue(ID,"")) quit:$length(key)  hang 0.000001  quit:$zhorolog-HH>TIMEOUT
			quit:$zhorolog-HH>TIMEOUT
			set @val1=^Queue(ID,key) kill ^Queue(ID,key)
			set IP=IP+1
			continue
		}
		if Op="jgz" {
			set:val1?1L val1=@val1
			set:val2?1L val2=@val2
			if val1>0 {
				set IP=IP+val2
				continue
			}
			set IP=IP+1
			continue
		}
	}
	set ^Finish(ID)=1
	quit ANS
CheckData(RecordsArr)
{
	set Line="",Error=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		if Record'?1(1(1"snd",1"rcv")1" "1(1.N,1L),1(1"set",1"add",1"mul",1"mod",1"jgz")1" "1(1L,1.N)1" "1(.1"-"1.N,1L)) {
			set Error="Wrong data format at line "_Line
			quit
		}
		set op=$piece(Record," ",1)
		if op'="jgz",op'="snd",$piece(Record," ",2)'?1L {
			set Error="Wrong data format at line "_Line
			quit
		}
	}
	if $length(Error) {
		write !,Error
		quit 0
	}
	quit 1
}
LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::.1 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
