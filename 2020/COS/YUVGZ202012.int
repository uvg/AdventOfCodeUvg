ROUTINE YUVGZ202012 [Type=INT]
YUVGZ202012	;https://adventofcode.com/2020/day/12;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
Input data:
F41
N2
L270
S3
F85
R90
E4
R180
E4
L90
F78
R270
F63
W2
R90
F40
R90
E3
S4
F44
W3
F6
S3
F21
N1
F47
L180
F96
S5
F7
S4
E4
S2
F46
L90
R180
W4
N4
F11
N3
W1
F51
S4
L90
W4
F93
R90
N3
R180
F66
W3
F93
W4
F20
W5
S4
E4
S4
E2
S3
L90
N5
F93
E5
N2
F50
L270
F10
W4
L180
N4
E2
S5
F17
E1
N5
F99
R90
F47
R180
F43
W3
L90
E3
N3
E5
S1
F89
W5
F73
R180
S3
L90
F81
N4
F17
L180
W2
F56
W5
N1
F81
S1
F7
S3
E4
F26
S2
W2
F71
W5
F10
L180
F3
E1
L90
F54
E5
N4
R90
F81
W3
F73
N5
F38
S1
L90
N1
L270
F51
R90
N2
E1
L90
F12
L90
E2
F69
S5
L90
F17
L90
W4
S4
L90
R90
F80
W5
N1
W2
F16
S5
F66
E3
F39
W4
F89
N5
W1
F37
N4
E4
R270
E2
L90
W2
F99
N3
E5
N2
F38
W4
S5
L180
F9
S4
W1
F8
W5
L90
W3
F60
W2
N5
F41
W2
L90
F75
N4
L90
N4
F5
W3
S2
F22
R90
S2
W4
F61
S1
L90
N1
L90
W4
S1
W3
S2
F94
E3
N4
F41
N1
W3
N4
R180
E4
F90
W1
S1
E5
N5
R90
W3
S1
F42
R90
F18
S4
E2
R180
E5
N2
F70
W5
F39
N3
W1
N5
W2
L90
N5
L90
S4
W2
L180
F62
S1
E4
F89
S2
W5
W4
S1
F86
F12
N5
F76
S2
W5
F32
R90
W2
F81
R90
W5
F6
S3
W5
F21
E4
F11
R90
S5
N5
W3
L180
W4
N4
L180
E2
F71
L90
E3
N5
R90
W3
R90
F1
W3
F67
R90
N5
F64
R90
N4
F2
E3
N4
R90
S2
F73
W4
R180
S5
L90
W4
F60
R90
W1
N5
F44
R90
S5
E3
F74
N5
F92
W3
R90
F65
N3
E3
N2
R90
F43
R90
F53
N5
L90
F75
W2
R90
F66
N4
F25
R180
N2
W5
F57
E4
F77
E5
R90
S5
F99
N3
F54
N5
F37
E5
F48
S1
F17
F49
L180
S2
R180
N3
L180
F100
E4
R90
E3
R90
F49
L180
W4
S3
E2
L90
N4
S3
F60
S5
F86
L90
E5
L180
F96
L90
W4
F30
S1
F31
S4
F78
E3
F51
S2
E5
S4
F5
S1
F45
R90
W2
S3
E5
F46
E4
R180
F9
W1
S5
W4
S1
R90
N1
W5
F87
N3
W2
F10
W1
L90
F34
S1
E2
L270
F98
N2
R90
F48
S4
F54
R90
N3
W3
R90
E4
S4
F93
N1
E2
F42
W4
L90
F29
E2
F51
S2
L90
F60
S4
R90
L90
S1
F58
S4
F81
N2
R90
S1
F28
S3
W5
F50
L180
S4
E4
F3
E2
R90
W4
F21
E2
S4
F99
N2
W1
F42
R180
S1
F9
L90
S4
W3
L90
F61
L90
F80
E2
N4
E1
R90
F62
W1
F59
R90
W4
N3
W1
L180
E2
R90
S1
F24
N1
R180
W5
F26
E4
N4
R90
E1
F19
W3
S2
L180
F18
L90
W2
F91
R90
E3
F88
N4
W4
F13
W4
F66
R90
E3
F33
L90
F24
L90
F17
S2
E1
F47
S4
F61
S3
R270
W1
L180
N2
E1
L90
F42
E3
R180
F58
W3
R90
W4
S3
F54
N3
L90
F49
L90
F49
E2
S3
F76
W2
N2
R90
F20
N4
R180
F34
N2
F44
W5
N3
F50
R180
F13
L90
F76
R270
F18
N2
F12
L90
W1
S5
L180
F72
N3
E3
W4
F36
E4
F74
S5
R90
F86
L90
F63
L90
S2
W4
F63
N3
E3
E3
S3
R90
W1
S3
L90
N1
E4
F4
E4
R90
F82
N3
F58
S5
R180
N3
F98
R90
R90
F29
S2
R180
W5
N1
F61
N3
E5
S3
E2
F30
N2
F66
W2
N2
F32
W4
R90
F2
E5
F90
R90
E2
R90
F7
R180
N5
E1
R90
S2
L90
F68
W3
F84
S4
E4
S4
E2
L90
S3
F83
R90
E4
R180
S2
L90
F92
F6
W5
R90
F5
R270
F85
E1
F9
L180
N5
L90
W1
N3
L90
E5
F10
R180
S3
W1
W1
L90
E1
F24
E5
F63
E4
F10
E3
F73
W3
F68
N5
W3
F90
R90
W2
F79
N5
R90
F71
E4
F51
E4
F11
W4
R90
N5
F41
L180
S4
L90
F18
R90
N3
W5
F38
S5
F24
S2
F25
W4
N2
E2
F36
N2
L90
F30
W1
F56
L90
W5
S2
E3
R90
F63
W2
F63
S4
W3
F81
R90
S1
L270
N5
L90
W2
F6
W4
L180
E2
L180
W3
R90
S3
R90
F49
N4
F23
R90
W4
N5
L90
F8
R90
F12
E2
L180
F95
	*/
	/*
Day 12 part 1:
Your ferry made decent progress toward the island, but the storm came in faster than anyone expected. The ferry needs to take evasive actions!

Unfortunately, the ship's navigation computer seems to be malfunctioning; rather than giving a route directly to safety, it produced extremely circuitous instructions. When the captain uses the PA system to ask if anyone can help, you quickly volunteer.

The navigation instructions (your puzzle input) consists of a sequence of single-character actions paired with integer input values. After staring at them for a few minutes, you work out what they probably mean:

Action N means to move north by the given value.
Action S means to move south by the given value.
Action E means to move east by the given value.
Action W means to move west by the given value.
Action L means to turn left the given number of degrees.
Action R means to turn right the given number of degrees.
Action F means to move forward by the given value in the direction the ship is currently facing.
The ship starts by facing east. Only the L and R actions change the direction the ship is facing. (That is, if the ship is facing east and the next instruction is N10, the ship would move north 10 units, but would still move east if the following action were F.)

For example:

F10
N3
F7
R90
F11
These instructions would be handled as follows:

F10 would move the ship 10 units east (because the ship starts by facing east) to east 10, north 0.
N3 would move the ship 3 units north to east 10, north 3.
F7 would move the ship another 7 units east (because the ship is still facing east) to east 17, north 3.
R90 would cause the ship to turn right by 90 degrees and face south; it remains at east 17, north 3.
F11 would move the ship 11 units south to east 17, south 8.
At the end of these instructions, the ship's Manhattan distance (sum of the absolute values of its east/west position and its north/south position) from its starting position is 17 + 8 = 25.

Figure out where the navigation instructions lead. What is the Manhattan distance between that location and the ship's starting position?
	*/
	/*
W $$Part1^YUVGZ202012(FN)
	*/
Part1(FileName="",RecordsArr) PUBLIC
{
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set Line="",Heading="E",EW=0,NS=0,HeadingsRight="ESWNESW",HeadingsLeft=$reverse(HeadingsRight)
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		set Inst=$extract(Record),Val=$extract(Record,2,*)
		if Inst="R" {
			set Val=Val/90
			set Heading=$extract(HeadingsRight,$find(HeadingsRight,Heading)-1+Val)
			continue
		}
		if Inst="L" {
			set Val=Val/90
			set Heading=$extract(HeadingsLeft,$find(HeadingsLeft,Heading)-1+Val)
			continue
		}
		if Inst="F" {
			if "EW"[Heading set Multi=$select(Heading="W":-1,1:1),EW=Val*Multi+EW
			if "NS"[Heading set Multi=$select(Heading="S":-1,1:1),NS=Val*Multi+NS
			continue
		}
		if Inst="N" {
			set NS=NS+Val
			continue
		}
		if Inst="S" {
			set NS=NS-Val
			continue
		}
		if Inst="E" {
			set EW=EW+Val
			continue
		}
		if Inst="W" {
			set EW=EW-Val
			continue
		}
	}
	write !,"EW=",EW," ,NS=",NS,!
	set Ans=$zabs(EW)+$zabs(NS)
	//
	//
	//
	//
	quit Ans
}
	/*
Day 12 part 2:
Before you can give the destination to the captain, you realize that the actual action meanings were printed on the back of the instructions the whole time.

Almost all of the actions indicate how to move a waypoint which is relative to the ship's position:

Action N means to move the waypoint north by the given value.
Action S means to move the waypoint south by the given value.
Action E means to move the waypoint east by the given value.
Action W means to move the waypoint west by the given value.
Action L means to rotate the waypoint around the ship left (counter-clockwise) the given number of degrees.
Action R means to rotate the waypoint around the ship right (clockwise) the given number of degrees.
Action F means to move forward to the waypoint a number of times equal to the given value.
The waypoint starts 10 units east and 1 unit north relative to the ship. The waypoint is relative to the ship; that is, if the ship moves, the waypoint moves with it.

For example, using the same instructions as above:

F10 moves the ship to the waypoint 10 times (a total of 100 units east and 10 units north), leaving the ship at east 100, north 10. The waypoint stays 10 units east and 1 unit north of the ship.
N3 moves the waypoint 3 units north to 10 units east and 4 units north of the ship. The ship remains at east 100, north 10.
F7 moves the ship to the waypoint 7 times (a total of 70 units east and 28 units north), leaving the ship at east 170, north 38. The waypoint stays 10 units east and 4 units north of the ship.
R90 rotates the waypoint around the ship clockwise 90 degrees, moving it to 4 units east and 10 units south of the ship. The ship remains at east 170, north 38.
F11 moves the ship to the waypoint 11 times (a total of 44 units east and 110 units south), leaving the ship at east 214, south 72. The waypoint stays 4 units east and 10 units south of the ship.
After these operations, the ship's Manhattan distance from its starting position is 214 + 72 = 286.

Figure out where the navigation instructions actually lead. What is the Manhattan distance between that location and the ship's starting position?
	*/
	/*
W $$Part2^YUVGZ202012(FN)
	*/
Part2(FileName="",RecordsArr) PUBLIC
{
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set Line="",EW=0,NS=0,WPEW=10,WPNS=1
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		set Inst=$extract(Record),Val=$extract(Record,2,*)
		if Inst="R" {
			set Val=Val/90
			for I=1:1:Val {
				set TMP=WPEW,WPEW=WPNS,WPNS=-TMP
			}
			continue
		}
		if Inst="L" {
			set Val=Val/90
			for I=1:1:Val {
				set TMP=WPEW,WPEW=-WPNS,WPNS=TMP
			}
			continue
		}
		if Inst="F" {
			set EW=WPEW*Val+EW,NS=WPNS*Val+NS
			continue
		}
		if Inst="N" {
			set WPNS=WPNS+Val
			continue
		}
		if Inst="S" {
			set WPNS=WPNS-Val
			continue
		}
		if Inst="E" {
			set WPEW=WPEW+Val
			continue
		}
		if Inst="W" {
			set WPEW=WPEW-Val
			continue
		}
	}
	write !,"EW=",EW," ,NS=",NS,!
	set Ans=$zabs(EW)+$zabs(NS)
	//
	//
	//
	//
	quit Ans
}
CheckData(RecordsArr)
{
	set Line="",Error=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		if Record'?1.(1"R",1"L",1"F",1"N",1"S",1"E",1"W")1.N {
			set Error="Wrong data format at line "_Line
			quit
		}
		if "RL"[$extract(Record),$extract(Record,2,*)#90||'$extract(Record,2,*)||($extract(Record,2,*)>270) {
			set Error="Turn data format at line "_Line
			quit			
		}
	}
	if $length(Error) {
		write !,Error
		quit 0
	}
	quit 1
}
LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::.1 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		if $length(Record) set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
