ROUTINE YUVGZ201524 [Type=INT]
YUVGZ201524	;https://adventofcode.com/2015/day/24;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
Input data:
1
2
3
5
7
13
17
19
23
29
31
37
41
43
53
59
61
67
71
73
79
83
89
97
101
103
107
109
113
	*/
	/*
Year 2015, Day 24 part 1:
Day 24: It Hangs in the Balance
It's Christmas Eve, and Santa is loading up the sleigh for this year's deliveries. However, there's one small problem: he can't get the sleigh to balance. If it isn't balanced, he can't defy physics, and nobody gets presents this year.

No pressure.

Santa has provided you a list of the weights of every package he needs to fit on the sleigh. The packages need to be split into three groups of exactly the same weight, and every package has to fit. The first group goes in the passenger compartment of the sleigh, and the second and third go in containers on either side. Only when all three groups weigh exactly the same amount will the sleigh be able to fly. Defying physics has rules, you know!

Of course, that's not the only problem. The first group - the one going in the passenger compartment - needs as few packages as possible so that Santa has some legroom left over. It doesn't matter how many packages are in either of the other two groups, so long as all of the groups weigh the same.

Furthermore, Santa tells you, if there are multiple ways to arrange the packages such that the fewest possible are in the first group, you need to choose the way where the first group has the smallest quantum entanglement to reduce the chance of any "complications". The quantum entanglement of a group of packages is the product of their weights, that is, the value you get when you multiply their weights together. Only consider quantum entanglement if the first group has the fewest possible number of packages in it and all groups weigh the same amount.

For example, suppose you have ten packages with weights 1 through 5 and 7 through 11. For this situation, some of the unique first groups, their quantum entanglements, and a way to divide the remaining packages are as follows:

Group 1;             Group 2; Group 3
11 9       (QE= 99); 10 8 2;  7 5 4 3 1
10 9 1     (QE= 90); 11 7 2;  8 5 4 3
10 8 2     (QE=160); 11 9;    7 5 4 3 1
10 7 3     (QE=210); 11 9;    8 5 4 2 1
10 5 4 1   (QE=200); 11 9;    8 7 3 2
10 5 3 2   (QE=300); 11 9;    8 7 4 1
10 4 3 2 1 (QE=240); 11 9;    8 7 5
9 8 3      (QE=216); 11 7 2;  10 5 4 1
9 7 4      (QE=252); 11 8 1;  10 5 3 2
9 5 4 2    (QE=360); 11 8 1;  10 7 3
8 7 5      (QE=280); 11 9;    10 4 3 2 1
8 5 4 3    (QE=480); 11 9;    10 7 2 1
7 5 4 3 1  (QE=420); 11 9;    10 8 2
Of these, although 10 9 1 has the smallest quantum entanglement (90), the configuration with only two packages, 11 9, in the passenger compartment gives Santa the most legroom and wins. In this situation, the quantum entanglement for the ideal configuration is therefore 99. Had there been two configurations with only two packages in the first group, the one with the smaller quantum entanglement would be chosen.

What is the quantum entanglement of the first group of packages in the ideal configuration?
	*/
	/*
W $$Part1^YUVGZ201524(FN)
	*/
Part1(FileName="",RecordsArr) PUBLIC
{
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set Total=0,Line=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Total=Total+RecordsArr(Line)
	}
	set Weight=Total/3
	write !!,"Weight is ",Weight,!!
	//
	set LastLine=$order(RecordsArr(""),-1)
	set MinMemory=LastLine*LastLine*3*1024
	set:MinMemory>$zstorage $zstorage=MinMemory
	do GetCombinations(Weight,.RecordsArr,.ComboArr,1)
	set ANS=$$FindBest(.ComboArr)
	//
	//
	//
	quit ANS
}
FindBest(&ComboArr,Total=1)
{
	do SortBySize(.ComboArr,.SortedArr)
	//zwrite ComboArr,SortedArr
	set Counter=""
	for  {
		set Counter=$order(SortedArr(Counter)) quit:Counter=""
		set QE=""
		for  {
			set QE=$order(SortedArr(Counter,QE)) quit:QE=""
			set Key=""
			for  {
				set Key=$order(SortedArr(Counter,QE,Key)) quit:Key=""
				return:$$FindMatch(.ComboArr,Key,Total) QE
			}
		}
	}
	quit 99999999
}
FindMatch(&ComboArr,Key,Total)
{
	set tempKey=Key,currTotal=0
	for  {
		set tempKey=$order(ComboArr(tempKey)) quit:tempKey=""
		//continue:tempKey=Key
		set ans=$$Different(.ComboArr,tempKey,Key)
		set:ans currTotal=currTotal+1
		//break:ans "L+"
		return:currTotal=Total 1
		return:$$FindMatch(.ComboArr,tempKey,Total-1) 1
	}
	quit 0
}
Different(&ComboArr,tempKey,Key)
{
	set Number=""
	for  {
		set Number=$order(ComboArr(Key,Number)) quit:Number=""
		return:$data(ComboArr(tempKey,Number)) 0
	}
	quit 1
}
SortBySize(&ComboArr,&SortedArr)
{
	set Key=""
	for  {
		set Key=$order(ComboArr(Key)) quit:Key=""
		//set Data=""
		set QE=1,Counter=0
		set Number=""
		for  {
			set Number=$order(ComboArr(Key,Number)) quit:Number=""
			//set Data=Data_$listbuild(Number)
			set QE=QE*Number,Counter=Counter+1
		}
		merge SortedArr(Counter,QE,Key)=ComboArr(Key)
	}	
}
GetCombinations(Weight,&PackagesWeight,&ComboArr,ComboKey,&ChosenWeight)
{
	quit:Weight=0 1
	quit:Weight<0 0
	set SW=0
	set Key="" for  {
		set Key=$order(PackagesWeight(Key),-1) quit:Key=""
		set tempWeight=PackagesWeight(Key)
		if tempWeight>Weight continue
		kill tempPackagesWeight
		merge tempPackagesWeight=PackagesWeight
		set tempKey=Key-1
		for  {
			set tempKey=$order(tempPackagesWeight(tempKey)) quit:tempKey=""
			kill tempPackagesWeight(tempKey)
		}
		//B "L+"
		kill tempChosenWeight merge tempChosenWeight=ChosenWeight set tempChosenWeight(tempWeight)=""
		if $$GetCombinations(Weight-tempWeight,.tempPackagesWeight,.ComboArr,.ComboKey,.tempChosenWeight) {
			//B "L+"
			merge ComboArr(ComboKey)=tempChosenWeight
			set ComboKey=ComboKey+1,SW=1
		}
	}
	quit 0
}

	/*
Year 2015, Day 24 part 2:
That's weird... the sleigh still isn't balancing.

"Ho ho ho", Santa muses to himself. "I forgot the trunk".

Balance the sleigh again, but this time, separate the packages into four groups instead of three. The other constraints still apply.

Given the example packages above, this would be some of the new unique first groups, their quantum entanglements, and one way to divide the remaining packages:


11 4    (QE=44); 10 5;   9 3 2 1; 8 7
10 5    (QE=50); 11 4;   9 3 2 1; 8 7
9 5 1   (QE=45); 11 4;   10 3 2;  8 7
9 4 2   (QE=72); 11 3 1; 10 5;    8 7
9 3 2 1 (QE=54); 11 4;   10 5;    8 7
8 7     (QE=56); 11 4;   10 5;    9 3 2 1
Of these, there are three arrangements that put the minimum (two) number of packages in the first group: 11 4, 10 5, and 8 7. Of these, 11 4 has the lowest quantum entanglement, and so it is selected.

Now, what is the quantum entanglement of the first group of packages in the ideal configuration?
	*/
	/*
W $$Part2^YUVGZ201524(FN)
	*/
Part2(FileName="",RecordsArr) PUBLIC
{
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set Total=0,Line=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Total=Total+RecordsArr(Line)
	}
	set Weight=Total/4
	write !!,"Weight is ",Weight,!!
	//
	set LastLine=$order(RecordsArr(""),-1)
	set MinMemory=LastLine*LastLine*3*1024
	set:MinMemory>$zstorage $zstorage=MinMemory
	do GetCombinations(Weight,.RecordsArr,.ComboArr,1)
	set ANS=$$FindBest(.ComboArr,2)
	//
	//
	//
	quit ANS
}
CheckData(RecordsArr)
{
	set Line="",Error=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		if Record'?1.N {
			set Error="Wrong data format at line "_Line
			quit
		}
	}
	if $length(Error) {
		write !,Error
		quit 0
	}
	quit 1
}
LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::.1 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
