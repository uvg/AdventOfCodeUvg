ROUTINE YUVGZ201523 [Type=INT]
YUVGZ201523	;https://adventofcode.com/2015/day/23;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
Input data:
jio a, +22
inc a
tpl a
tpl a
tpl a
inc a
tpl a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
jmp +19
tpl a
tpl a
tpl a
tpl a
inc a
inc a
tpl a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
inc a
tpl a
tpl a
jio a, +8
inc b
jie a, +4
tpl a
inc a
jmp +2
hlf a
jmp -7
	*/
	/*
Year 2015, Day 23 part 1:
Day 23: Opening the Turing Lock
Little Jane Marie just got her very first computer for Christmas from some unknown benefactor. It comes with instructions and an example program, but the computer itself seems to be malfunctioning. She's curious what the program does, and would like you to help her run it.

The manual explains that the computer supports two registers and six instructions (truly, it goes on to remind the reader, a state-of-the-art technology). The registers are named a and b, can hold any non-negative integer, and begin with a value of 0. The instructions are as follows:

hlf r sets register r to half its current value, then continues with the next instruction.
tpl r sets register r to triple its current value, then continues with the next instruction.
inc r increments register r, adding 1 to it, then continues with the next instruction.
jmp offset is a jump; it continues with the instruction offset away relative to itself.
jie r, offset is like jmp, but only jumps if register r is even ("jump if even").
jio r, offset is like jmp, but only jumps if register r is 1 ("jump if one", not odd).
All three jump instructions work with an offset relative to that instruction. The offset is always written with a prefix + or - to indicate the direction of the jump (forward or backward, respectively). For example, jmp +1 would simply continue with the next instruction, while jmp +0 would continuously jump back to itself forever.

The program exits when it tries to run an instruction beyond the ones defined.

For example, this program sets a to 2, because the jio instruction causes it to skip the tpl instruction:

inc a
jio a, +2
tpl a
inc a
What is the value in register b when the program in your puzzle input is finished executing?
	*/
	/*
W $$Part1^YUVGZ201523(FN)
	*/
Part1(FileName="",RecordsArr) [a,b] PUBLIC
{
	new a,b
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set ip=1,(a,b)=0
	for  {
		quit:'$data(RecordsArr(ip))
		set Insturction=$piece(RecordsArr(ip)," ",1),Register=$piece($piece(RecordsArr(ip)," ",2),",",1),Offset=+$piece(RecordsArr(ip)," ",3)
		set:Insturction="jmp" Offset=Register,Register=""
		if Insturction="jmp" {
			set ip=ip+Offset
			continue
		}
		if Insturction="jie" {
			if '(@Register#2) {
				set ip=ip+Offset
			}
			else {
				set ip=ip+1
			}
			continue
		}
		if Insturction="jio" {
			if @Register=1 {
				set ip=ip+Offset
			}
			else {
				set ip=ip+1
			}
			continue
		}
		if Insturction="inc" {
			set @Register=@Register+1,ip=ip+1
			continue
		}
		if Insturction="tpl" {
			set @Register=@Register*3,ip=ip+1
			continue
		}
		if Insturction="hlf" {
			set @Register=@Register/2,ip=ip+1
			if $piece(@Register,".",2) kill a set a=a  //bug, what to do if half is not an integer???
			continue
		}
		k a s a=a  //unknown instruction
	}
	set ANS=b
	w !!,"a=",a,", b=",b,!!
	//
	//
	//
	quit ANS
}
	/*
Year 2015, Day 23 part 2:
The unknown benefactor is very thankful for releasi-- er, helping little Jane Marie with her computer. Definitely not to distract you, what is the value in register b after the program is finished executing if register a starts as 1 instead?
	*/
	/*
W $$Part2^YUVGZ201523(FN)
	*/
Part2(FileName="",RecordsArr) [a,b] PUBLIC
{
	new a,b
	if $data(RecordsArr)'=10 {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
	}
	quit:'$$CheckData(.RecordsArr) 0
	set ip=1,a=1,b=0
	for  {
		quit:'$data(RecordsArr(ip))
		set Insturction=$piece(RecordsArr(ip)," ",1),Register=$piece($piece(RecordsArr(ip)," ",2),",",1),Offset=+$piece(RecordsArr(ip)," ",3)
		set:Insturction="jmp" Offset=Register,Register=""
		if Insturction="jmp" {
			set ip=ip+Offset
			continue
		}
		if Insturction="jie" {
			if '(@Register#2) {
				set ip=ip+Offset
			}
			else {
				set ip=ip+1
			}
			continue
		}
		if Insturction="jio" {
			if @Register=1 {
				set ip=ip+Offset
			}
			else {
				set ip=ip+1
			}
			continue
		}
		if Insturction="inc" {
			set @Register=@Register+1,ip=ip+1
			continue
		}
		if Insturction="tpl" {
			set @Register=@Register*3,ip=ip+1
			continue
		}
		if Insturction="hlf" {
			set @Register=@Register/2,ip=ip+1
			if $piece(@Register,".",2) kill a set a=a  //bug, what to do if half is not an integer???
			continue
		}
		k a s a=a  //unknown instruction
	}
	set ANS=b
	w !!,"a=",a,", b=",b,!!
	//
	//
	//
	quit ANS
}
CheckData(RecordsArr)
{
	set Line="",Error=""
	for  {
		set Line=$order(RecordsArr(Line)) quit:Line=""
		set Record=RecordsArr(Line)
		set NumOfSpaces=$length(Record," ")
		if NumOfSpaces'=2,NumOfSpaces'=3 {
			set Error="Wrong data format at line "_Line
			quit
		}
		set Instruct=$piece(Record," ",1)
		if ",hlf,tpl,inc,jmp,jie,jio,"'[(","_Instruct_",") {
			set Error="Unknown insturction "_Record_" at line "_Line
			quit
		}
		if ",jie,jio,"[(","_Instruct_","),NumOfSpaces'=3 {
			set Error="Unknown insturction format "_Record_" at line "_Line
			quit
		}
		if ",jie,jio,"'[(","_Instruct_","),NumOfSpaces'=2 {
			set Error="Unknown insturction format "_Record_" at line "_Line
			quit
		}
		set Reg=$piece($piece(Record," ",2),",",1),Offset=$p(Record," ",3)
		if Instruct="jmp" set Offset=Reg,Reg=""
		if Reg'="a",Reg'="b",Instruct'="jmp" {
			set Error="Unknown register in insturction "_Record_" at line "_Line
			quit
		}
		if Reg'="",Instruct="jmp" {
			set Error="Unknown register in insturction "_Record_" at line "_Line
			quit
		}
		if $length(Offset),",jie,jio,jmp,"'[(","_Instruct_",") {
			set Error="Wrong offset for insturction "_Record_" at line "_Line
			quit
		}
		i $l(Offset),Offset'?1(1"+",1"-")1.n {
			set Error="Wrong offset format in insturction "_Record_" at line "_Line
			quit
		}
	}
	if $length(Error) {
		write !,Error
		quit 0
	}
	quit 1
}
LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::.1 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$zutil(68,40,1) //$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $zutil(68,40,0) //$system.Process.SetZEOF(0)
	quit 1
}
