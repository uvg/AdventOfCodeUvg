ROUTINE YUVGZ201510 [Type=INT]
YUVGZ201510	;https://adventofcode.com/2015/day/10;
	//Intersystems developer community id: 130669-ab1f69bf
	quit
	/*
1321131112
	*/
	/*
Today, the Elves are playing a game called look-and-say. They take turns making sequences by reading aloud the previous sequence and using that reading as the next sequence. For example, 211 is read as "one two, two ones", which becomes 1221 (1 2, 2 1s).

Look-and-say sequences are generated iteratively, using the previous value as input for the next step. For each step, take the previous value, and replace each run of digits (like 111) with the number of digits (3) followed by the digit itself (1).

For example:

1 becomes 11 (1 copy of digit 1).
11 becomes 21 (2 copies of digit 1).
21 becomes 1211 (one 2 followed by one 1).
1211 becomes 111221 (one 1, one 2, and two 1s).
111221 becomes 312211 (three 1s, two 2s, and one 1).
Starting with the digits in your puzzle input, apply this process 40 times. What is the length of the result?
	*/
Part1(FileName="",Data="",Times="") PUBLIC
{
	if '$length(Times) {
		read !,"Enter how many times to process it: ",Times
		write !
	}
	if Times'?1.n||'$extract(Times) {
		write !,"Wrong number of times to process ("_Times_")"
		quit 0
	}
	if '$length(Data) {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
		if ($order(RecordsArr(""))'=1)||($order(RecordsArr(""),-1)'=1) {
			write !,"More than 1 lines of data in "_FileName
			quit 0
		}
		set Data=RecordsArr(1)
	}
	if Data'?1.n {
		write !,"Wrong data (",Data,")"
		quit 0
	}
	set String=Data
	for i=1:1:Times {
		set NewString=""
		set Counter=0,Start=1
		for j=1:1:$length(String)+1 {
			if $extract(String,j)=$extract(String,Start) {
				set Counter=Counter+1
				continue
			}
			set NewString=NewString_Counter_$extract(String,Start)
			set Start=j,Counter=1
		}
		set String=NewString
	}
	//w !,NewString,!
	quit $length(NewString)
}

	/*
	*/
Part2(FileName="",Data="",Times="") PUBLIC
{
	if '$length(Times) {
		read !,"Enter how many times to process it: ",Times
		write !
	}
	if Times'?1.n||'$extract(Times) {
		write !,"Wrong number of times to process ("_Times_")"
		quit 0
	}
	if '$length(Data) {
		if '$length(FileName) {
			read !,"Enter filename: ",FileName
			write !
		}
		if '$length(FileName) {
			write !,"Missing file to read from"
			quit 0
		}
		quit:'$$LoadFile(FileName,.RecordsArr) 0
		if '$data(RecordsArr) {
			write !,"No data was red from "_FileName
			quit 0
		}
		if ($order(RecordsArr(""))'=1)||($order(RecordsArr(""),-1)'=1) {
			write !,"More than 1 lines of data in "_FileName
			quit 0
		}
		set Data=RecordsArr(1)
	}
	if Data'?1.n {
		write !,"Wrong data (",Data,")"
		quit 0
	}
	set obj=##class(%GlobalCharacterStream).%New()
	do obj.Write(Data)
	for i=1:1:Times {
		W !,"#",i,?5,obj.Size
		do obj.Rewind()
		set objNew=##class(%GlobalCharacterStream).%New()
		set Counter=0,Start=1,Char=obj.Read(1),currChar=Char
		for j=1:1:obj.Size+1 {
			set:j>1 currChar=obj.Read(1)
			if currChar=Char {
				set Counter=Counter+1
				continue
			}
			do objNew.Write(Counter_Char)
			set Start=j,Counter=1,Char=currChar
		}
		set obj=objNew
	}
	//w !,NewString,!
	do obj.Rewind()
	write !,obj.Read(),!
	quit obj.Size
}

LoadFile(FileName,RecordsArr)
{
	kill RecordsArr
	open FileName::2 if '$test {
		write !,"Error loading file "_FileName
		quit 0
	}
	set EndOfFileSW=$system.Process.SetZEOF(1)
	use FileName
	for Line=1:1 {
		read Record quit:$zeof
		if $length(Record) set RecordsArr(Line)=Record
	}
	close FileName
	if 'EndOfFileSW do $system.Process.SetZEOF(0)
	quit 1
}

